<?php
/**
 * LoginData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 4.30.43656
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LoginData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoginData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoginData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_name' => 'string',
'version' => 'string',
'esia_login_page' => 'string',
'cache_ver' => 'string',
'school_login' => 'bool',
'em_login' => 'bool',
'windows_auth' => 'bool',
'enable_sms' => 'bool',
'esia_main_auth' => 'bool',
'esia_button' => 'bool',
'signature_login' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_name' => null,
'version' => null,
'esia_login_page' => null,
'cache_ver' => null,
'school_login' => null,
'em_login' => null,
'windows_auth' => null,
'enable_sms' => null,
'esia_main_auth' => null,
'esia_button' => null,
'signature_login' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_name' => 'productName',
'version' => 'version',
'esia_login_page' => 'esiaLoginPage',
'cache_ver' => 'cacheVer',
'school_login' => 'schoolLogin',
'em_login' => 'emLogin',
'windows_auth' => 'windowsAuth',
'enable_sms' => 'enableSms',
'esia_main_auth' => 'esiaMainAuth',
'esia_button' => 'esiaButton',
'signature_login' => 'signatureLogin'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_name' => 'setProductName',
'version' => 'setVersion',
'esia_login_page' => 'setEsiaLoginPage',
'cache_ver' => 'setCacheVer',
'school_login' => 'setSchoolLogin',
'em_login' => 'setEmLogin',
'windows_auth' => 'setWindowsAuth',
'enable_sms' => 'setEnableSms',
'esia_main_auth' => 'setEsiaMainAuth',
'esia_button' => 'setEsiaButton',
'signature_login' => 'setSignatureLogin'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_name' => 'getProductName',
'version' => 'getVersion',
'esia_login_page' => 'getEsiaLoginPage',
'cache_ver' => 'getCacheVer',
'school_login' => 'getSchoolLogin',
'em_login' => 'getEmLogin',
'windows_auth' => 'getWindowsAuth',
'enable_sms' => 'getEnableSms',
'esia_main_auth' => 'getEsiaMainAuth',
'esia_button' => 'getEsiaButton',
'signature_login' => 'getSignatureLogin'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['esia_login_page'] = isset($data['esia_login_page']) ? $data['esia_login_page'] : null;
        $this->container['cache_ver'] = isset($data['cache_ver']) ? $data['cache_ver'] : null;
        $this->container['school_login'] = isset($data['school_login']) ? $data['school_login'] : null;
        $this->container['em_login'] = isset($data['em_login']) ? $data['em_login'] : null;
        $this->container['windows_auth'] = isset($data['windows_auth']) ? $data['windows_auth'] : null;
        $this->container['enable_sms'] = isset($data['enable_sms']) ? $data['enable_sms'] : null;
        $this->container['esia_main_auth'] = isset($data['esia_main_auth']) ? $data['esia_main_auth'] : null;
        $this->container['esia_button'] = isset($data['esia_button']) ? $data['esia_button'] : null;
        $this->container['signature_login'] = isset($data['signature_login']) ? $data['signature_login'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets esia_login_page
     *
     * @return string
     */
    public function getEsiaLoginPage()
    {
        return $this->container['esia_login_page'];
    }

    /**
     * Sets esia_login_page
     *
     * @param string $esia_login_page esia_login_page
     *
     * @return $this
     */
    public function setEsiaLoginPage($esia_login_page)
    {
        $this->container['esia_login_page'] = $esia_login_page;

        return $this;
    }

    /**
     * Gets cache_ver
     *
     * @return string
     */
    public function getCacheVer()
    {
        return $this->container['cache_ver'];
    }

    /**
     * Sets cache_ver
     *
     * @param string $cache_ver cache_ver
     *
     * @return $this
     */
    public function setCacheVer($cache_ver)
    {
        $this->container['cache_ver'] = $cache_ver;

        return $this;
    }

    /**
     * Gets school_login
     *
     * @return bool
     */
    public function getSchoolLogin()
    {
        return $this->container['school_login'];
    }

    /**
     * Sets school_login
     *
     * @param bool $school_login school_login
     *
     * @return $this
     */
    public function setSchoolLogin($school_login)
    {
        $this->container['school_login'] = $school_login;

        return $this;
    }

    /**
     * Gets em_login
     *
     * @return bool
     */
    public function getEmLogin()
    {
        return $this->container['em_login'];
    }

    /**
     * Sets em_login
     *
     * @param bool $em_login em_login
     *
     * @return $this
     */
    public function setEmLogin($em_login)
    {
        $this->container['em_login'] = $em_login;

        return $this;
    }

    /**
     * Gets windows_auth
     *
     * @return bool
     */
    public function getWindowsAuth()
    {
        return $this->container['windows_auth'];
    }

    /**
     * Sets windows_auth
     *
     * @param bool $windows_auth windows_auth
     *
     * @return $this
     */
    public function setWindowsAuth($windows_auth)
    {
        $this->container['windows_auth'] = $windows_auth;

        return $this;
    }

    /**
     * Gets enable_sms
     *
     * @return bool
     */
    public function getEnableSms()
    {
        return $this->container['enable_sms'];
    }

    /**
     * Sets enable_sms
     *
     * @param bool $enable_sms enable_sms
     *
     * @return $this
     */
    public function setEnableSms($enable_sms)
    {
        $this->container['enable_sms'] = $enable_sms;

        return $this;
    }

    /**
     * Gets esia_main_auth
     *
     * @return bool
     */
    public function getEsiaMainAuth()
    {
        return $this->container['esia_main_auth'];
    }

    /**
     * Sets esia_main_auth
     *
     * @param bool $esia_main_auth esia_main_auth
     *
     * @return $this
     */
    public function setEsiaMainAuth($esia_main_auth)
    {
        $this->container['esia_main_auth'] = $esia_main_auth;

        return $this;
    }

    /**
     * Gets esia_button
     *
     * @return bool
     */
    public function getEsiaButton()
    {
        return $this->container['esia_button'];
    }

    /**
     * Sets esia_button
     *
     * @param bool $esia_button esia_button
     *
     * @return $this
     */
    public function setEsiaButton($esia_button)
    {
        $this->container['esia_button'] = $esia_button;

        return $this;
    }

    /**
     * Gets signature_login
     *
     * @return bool
     */
    public function getSignatureLogin()
    {
        return $this->container['signature_login'];
    }

    /**
     * Sets signature_login
     *
     * @param bool $signature_login signature_login
     *
     * @return $this
     */
    public function setSignatureLogin($signature_login)
    {
        $this->container['signature_login'] = $signature_login;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
