<?php
/**
 * MySettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MySettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MySettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'mySettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user_id' => 'int',
'first_name' => 'string',
'last_name' => 'string',
'middle_name' => 'string',
'login_name' => 'string',
'birth_date' => '\DateTime',
'roles' => 'string[]',
'schoolyear_id' => 'int',
'windows_account' => 'string',
'mobile_phone' => 'string',
'prefered_com' => 'string',
'email' => 'string',
'exists_photo' => 'bool',
'user_settings' => '\Swagger\Client\Model\MySettingsUserSettings'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user_id' => null,
'first_name' => null,
'last_name' => null,
'middle_name' => null,
'login_name' => null,
'birth_date' => 'date',
'roles' => null,
'schoolyear_id' => null,
'windows_account' => null,
'mobile_phone' => null,
'prefered_com' => null,
'email' => null,
'exists_photo' => null,
'user_settings' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'userId',
'first_name' => 'firstName',
'last_name' => 'lastName',
'middle_name' => 'middleName',
'login_name' => 'loginName',
'birth_date' => 'birthDate',
'roles' => 'roles',
'schoolyear_id' => 'schoolyearId',
'windows_account' => 'windowsAccount',
'mobile_phone' => 'mobilePhone',
'prefered_com' => 'preferedCom',
'email' => 'email',
'exists_photo' => 'existsPhoto',
'user_settings' => 'userSettings'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
'first_name' => 'setFirstName',
'last_name' => 'setLastName',
'middle_name' => 'setMiddleName',
'login_name' => 'setLoginName',
'birth_date' => 'setBirthDate',
'roles' => 'setRoles',
'schoolyear_id' => 'setSchoolyearId',
'windows_account' => 'setWindowsAccount',
'mobile_phone' => 'setMobilePhone',
'prefered_com' => 'setPreferedCom',
'email' => 'setEmail',
'exists_photo' => 'setExistsPhoto',
'user_settings' => 'setUserSettings'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
'first_name' => 'getFirstName',
'last_name' => 'getLastName',
'middle_name' => 'getMiddleName',
'login_name' => 'getLoginName',
'birth_date' => 'getBirthDate',
'roles' => 'getRoles',
'schoolyear_id' => 'getSchoolyearId',
'windows_account' => 'getWindowsAccount',
'mobile_phone' => 'getMobilePhone',
'prefered_com' => 'getPreferedCom',
'email' => 'getEmail',
'exists_photo' => 'getExistsPhoto',
'user_settings' => 'getUserSettings'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['login_name'] = isset($data['login_name']) ? $data['login_name'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['schoolyear_id'] = isset($data['schoolyear_id']) ? $data['schoolyear_id'] : null;
        $this->container['windows_account'] = isset($data['windows_account']) ? $data['windows_account'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['prefered_com'] = isset($data['prefered_com']) ? $data['prefered_com'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['exists_photo'] = isset($data['exists_photo']) ? $data['exists_photo'] : null;
        $this->container['user_settings'] = isset($data['user_settings']) ? $data['user_settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name middle_name
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets login_name
     *
     * @return string
     */
    public function getLoginName()
    {
        return $this->container['login_name'];
    }

    /**
     * Sets login_name
     *
     * @param string $login_name login_name
     *
     * @return $this
     */
    public function setLoginName($login_name)
    {
        $this->container['login_name'] = $login_name;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime $birth_date birth_date
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[] $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets schoolyear_id
     *
     * @return int
     */
    public function getSchoolyearId()
    {
        return $this->container['schoolyear_id'];
    }

    /**
     * Sets schoolyear_id
     *
     * @param int $schoolyear_id schoolyear_id
     *
     * @return $this
     */
    public function setSchoolyearId($schoolyear_id)
    {
        $this->container['schoolyear_id'] = $schoolyear_id;

        return $this;
    }

    /**
     * Gets windows_account
     *
     * @return string
     */
    public function getWindowsAccount()
    {
        return $this->container['windows_account'];
    }

    /**
     * Sets windows_account
     *
     * @param string $windows_account windows_account
     *
     * @return $this
     */
    public function setWindowsAccount($windows_account)
    {
        $this->container['windows_account'] = $windows_account;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string $mobile_phone mobile_phone
     *
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets prefered_com
     *
     * @return string
     */
    public function getPreferedCom()
    {
        return $this->container['prefered_com'];
    }

    /**
     * Sets prefered_com
     *
     * @param string $prefered_com prefered_com
     *
     * @return $this
     */
    public function setPreferedCom($prefered_com)
    {
        $this->container['prefered_com'] = $prefered_com;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets exists_photo
     *
     * @return bool
     */
    public function getExistsPhoto()
    {
        return $this->container['exists_photo'];
    }

    /**
     * Sets exists_photo
     *
     * @param bool $exists_photo exists_photo
     *
     * @return $this
     */
    public function setExistsPhoto($exists_photo)
    {
        $this->container['exists_photo'] = $exists_photo;

        return $this;
    }

    /**
     * Gets user_settings
     *
     * @return \Swagger\Client\Model\MySettingsUserSettings
     */
    public function getUserSettings()
    {
        return $this->container['user_settings'];
    }

    /**
     * Sets user_settings
     *
     * @param \Swagger\Client\Model\MySettingsUserSettings $user_settings user_settings
     *
     * @return $this
     */
    public function setUserSettings($user_settings)
    {
        $this->container['user_settings'] = $user_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
