<?php
/**
 * PrepareEmLoginForm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PrepareEmLoginForm Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PrepareEmLoginForm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PrepareEmLoginForm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'countries' => '\Swagger\Client\Model\PrepareEmLoginFormCountries[]',
'states' => '\Swagger\Client\Model\PrepareEmLoginFormCountries[]',
'hlevels' => '\Swagger\Client\Model\PrepareEmLoginFormCountries[]',
'ems' => '\Swagger\Client\Model\PrepareEmLoginFormCountries[]',
'em_cid' => 'int',
'em_sid' => 'int',
'hlevel' => 'int',
'em_id' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'countries' => null,
'states' => null,
'hlevels' => null,
'ems' => null,
'em_cid' => null,
'em_sid' => null,
'hlevel' => null,
'em_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'countries' => 'countries',
'states' => 'states',
'hlevels' => 'hlevels',
'ems' => 'ems',
'em_cid' => 'em_cid',
'em_sid' => 'em_sid',
'hlevel' => 'hlevel',
'em_id' => 'emId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'countries' => 'setCountries',
'states' => 'setStates',
'hlevels' => 'setHlevels',
'ems' => 'setEms',
'em_cid' => 'setEmCid',
'em_sid' => 'setEmSid',
'hlevel' => 'setHlevel',
'em_id' => 'setEmId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'countries' => 'getCountries',
'states' => 'getStates',
'hlevels' => 'getHlevels',
'ems' => 'getEms',
'em_cid' => 'getEmCid',
'em_sid' => 'getEmSid',
'hlevel' => 'getHlevel',
'em_id' => 'getEmId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['states'] = isset($data['states']) ? $data['states'] : null;
        $this->container['hlevels'] = isset($data['hlevels']) ? $data['hlevels'] : null;
        $this->container['ems'] = isset($data['ems']) ? $data['ems'] : null;
        $this->container['em_cid'] = isset($data['em_cid']) ? $data['em_cid'] : null;
        $this->container['em_sid'] = isset($data['em_sid']) ? $data['em_sid'] : null;
        $this->container['hlevel'] = isset($data['hlevel']) ? $data['hlevel'] : null;
        $this->container['em_id'] = isset($data['em_id']) ? $data['em_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets countries
     *
     * @return \Swagger\Client\Model\PrepareEmLoginFormCountries[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param \Swagger\Client\Model\PrepareEmLoginFormCountries[] $countries countries
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets states
     *
     * @return \Swagger\Client\Model\PrepareEmLoginFormCountries[]
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param \Swagger\Client\Model\PrepareEmLoginFormCountries[] $states states
     *
     * @return $this
     */
    public function setStates($states)
    {
        $this->container['states'] = $states;

        return $this;
    }

    /**
     * Gets hlevels
     *
     * @return \Swagger\Client\Model\PrepareEmLoginFormCountries[]
     */
    public function getHlevels()
    {
        return $this->container['hlevels'];
    }

    /**
     * Sets hlevels
     *
     * @param \Swagger\Client\Model\PrepareEmLoginFormCountries[] $hlevels hlevels
     *
     * @return $this
     */
    public function setHlevels($hlevels)
    {
        $this->container['hlevels'] = $hlevels;

        return $this;
    }

    /**
     * Gets ems
     *
     * @return \Swagger\Client\Model\PrepareEmLoginFormCountries[]
     */
    public function getEms()
    {
        return $this->container['ems'];
    }

    /**
     * Sets ems
     *
     * @param \Swagger\Client\Model\PrepareEmLoginFormCountries[] $ems ems
     *
     * @return $this
     */
    public function setEms($ems)
    {
        $this->container['ems'] = $ems;

        return $this;
    }

    /**
     * Gets em_cid
     *
     * @return int
     */
    public function getEmCid()
    {
        return $this->container['em_cid'];
    }

    /**
     * Sets em_cid
     *
     * @param int $em_cid em_cid
     *
     * @return $this
     */
    public function setEmCid($em_cid)
    {
        $this->container['em_cid'] = $em_cid;

        return $this;
    }

    /**
     * Gets em_sid
     *
     * @return int
     */
    public function getEmSid()
    {
        return $this->container['em_sid'];
    }

    /**
     * Sets em_sid
     *
     * @param int $em_sid em_sid
     *
     * @return $this
     */
    public function setEmSid($em_sid)
    {
        $this->container['em_sid'] = $em_sid;

        return $this;
    }

    /**
     * Gets hlevel
     *
     * @return int
     */
    public function getHlevel()
    {
        return $this->container['hlevel'];
    }

    /**
     * Sets hlevel
     *
     * @param int $hlevel hlevel
     *
     * @return $this
     */
    public function setHlevel($hlevel)
    {
        $this->container['hlevel'] = $hlevel;

        return $this;
    }

    /**
     * Gets em_id
     *
     * @return int
     */
    public function getEmId()
    {
        return $this->container['em_id'];
    }

    /**
     * Sets em_id
     *
     * @param int $em_id em_id
     *
     * @return $this
     */
    public function setEmId($em_id)
    {
        $this->container['em_id'] = $em_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
