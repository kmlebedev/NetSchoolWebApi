<?php
/**
 * MySettingsUserSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MySettingsUserSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MySettingsUserSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'mySettings_userSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'show_mobile_phone' => 'bool',
'default_desktop' => 'int',
'language' => 'string',
'favorite_reports' => 'string[]',
'password_expired' => 'int',
'recovery_answer' => 'string',
'recovery_question' => 'string',
'theme' => 'int',
'user_id' => 'int',
'show_net_school_app' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'show_mobile_phone' => null,
'default_desktop' => null,
'language' => null,
'favorite_reports' => null,
'password_expired' => null,
'recovery_answer' => null,
'recovery_question' => null,
'theme' => null,
'user_id' => null,
'show_net_school_app' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'show_mobile_phone' => 'showMobilePhone',
'default_desktop' => 'defaultDesktop',
'language' => 'language',
'favorite_reports' => 'favoriteReports',
'password_expired' => 'passwordExpired',
'recovery_answer' => 'recoveryAnswer',
'recovery_question' => 'recoveryQuestion',
'theme' => 'theme',
'user_id' => 'userId',
'show_net_school_app' => 'showNetSchoolApp'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'show_mobile_phone' => 'setShowMobilePhone',
'default_desktop' => 'setDefaultDesktop',
'language' => 'setLanguage',
'favorite_reports' => 'setFavoriteReports',
'password_expired' => 'setPasswordExpired',
'recovery_answer' => 'setRecoveryAnswer',
'recovery_question' => 'setRecoveryQuestion',
'theme' => 'setTheme',
'user_id' => 'setUserId',
'show_net_school_app' => 'setShowNetSchoolApp'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'show_mobile_phone' => 'getShowMobilePhone',
'default_desktop' => 'getDefaultDesktop',
'language' => 'getLanguage',
'favorite_reports' => 'getFavoriteReports',
'password_expired' => 'getPasswordExpired',
'recovery_answer' => 'getRecoveryAnswer',
'recovery_question' => 'getRecoveryQuestion',
'theme' => 'getTheme',
'user_id' => 'getUserId',
'show_net_school_app' => 'getShowNetSchoolApp'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['show_mobile_phone'] = isset($data['show_mobile_phone']) ? $data['show_mobile_phone'] : null;
        $this->container['default_desktop'] = isset($data['default_desktop']) ? $data['default_desktop'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['favorite_reports'] = isset($data['favorite_reports']) ? $data['favorite_reports'] : null;
        $this->container['password_expired'] = isset($data['password_expired']) ? $data['password_expired'] : null;
        $this->container['recovery_answer'] = isset($data['recovery_answer']) ? $data['recovery_answer'] : null;
        $this->container['recovery_question'] = isset($data['recovery_question']) ? $data['recovery_question'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['show_net_school_app'] = isset($data['show_net_school_app']) ? $data['show_net_school_app'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets show_mobile_phone
     *
     * @return bool
     */
    public function getShowMobilePhone()
    {
        return $this->container['show_mobile_phone'];
    }

    /**
     * Sets show_mobile_phone
     *
     * @param bool $show_mobile_phone show_mobile_phone
     *
     * @return $this
     */
    public function setShowMobilePhone($show_mobile_phone)
    {
        $this->container['show_mobile_phone'] = $show_mobile_phone;

        return $this;
    }

    /**
     * Gets default_desktop
     *
     * @return int
     */
    public function getDefaultDesktop()
    {
        return $this->container['default_desktop'];
    }

    /**
     * Sets default_desktop
     *
     * @param int $default_desktop default_desktop
     *
     * @return $this
     */
    public function setDefaultDesktop($default_desktop)
    {
        $this->container['default_desktop'] = $default_desktop;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets favorite_reports
     *
     * @return string[]
     */
    public function getFavoriteReports()
    {
        return $this->container['favorite_reports'];
    }

    /**
     * Sets favorite_reports
     *
     * @param string[] $favorite_reports favorite_reports
     *
     * @return $this
     */
    public function setFavoriteReports($favorite_reports)
    {
        $this->container['favorite_reports'] = $favorite_reports;

        return $this;
    }

    /**
     * Gets password_expired
     *
     * @return int
     */
    public function getPasswordExpired()
    {
        return $this->container['password_expired'];
    }

    /**
     * Sets password_expired
     *
     * @param int $password_expired password_expired
     *
     * @return $this
     */
    public function setPasswordExpired($password_expired)
    {
        $this->container['password_expired'] = $password_expired;

        return $this;
    }

    /**
     * Gets recovery_answer
     *
     * @return string
     */
    public function getRecoveryAnswer()
    {
        return $this->container['recovery_answer'];
    }

    /**
     * Sets recovery_answer
     *
     * @param string $recovery_answer recovery_answer
     *
     * @return $this
     */
    public function setRecoveryAnswer($recovery_answer)
    {
        $this->container['recovery_answer'] = $recovery_answer;

        return $this;
    }

    /**
     * Gets recovery_question
     *
     * @return string
     */
    public function getRecoveryQuestion()
    {
        return $this->container['recovery_question'];
    }

    /**
     * Sets recovery_question
     *
     * @param string $recovery_question recovery_question
     *
     * @return $this
     */
    public function setRecoveryQuestion($recovery_question)
    {
        $this->container['recovery_question'] = $recovery_question;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return int
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param int $theme theme
     *
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets show_net_school_app
     *
     * @return bool
     */
    public function getShowNetSchoolApp()
    {
        return $this->container['show_net_school_app'];
    }

    /**
     * Sets show_net_school_app
     *
     * @param bool $show_net_school_app show_net_school_app
     *
     * @return $this
     */
    public function setShowNetSchoolApp($show_net_school_app)
    {
        $this->container['show_net_school_app'] = $show_net_school_app;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
