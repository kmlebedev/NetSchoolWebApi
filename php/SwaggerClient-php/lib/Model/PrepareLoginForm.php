<?php
/**
 * PrepareLoginForm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PrepareLoginForm Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PrepareLoginForm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PrepareLoginForm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'countries' => '\Swagger\Client\Model\PrepareEmLoginFormCountries[]',
'states' => '\Swagger\Client\Model\PrepareEmLoginFormCountries[]',
'provinces' => '\Swagger\Client\Model\PrepareEmLoginFormCountries[]',
'cities' => '\Swagger\Client\Model\PrepareEmLoginFormCountries[]',
'funcs' => '\Swagger\Client\Model\PrepareEmLoginFormCountries[]',
'schools' => '\Swagger\Client\Model\PrepareEmLoginFormCountries[]',
'cid' => 'int',
'sid' => 'int',
'pid' => 'int',
'cn' => 'int',
'sft' => 'int',
'scid' => 'int',
'hlevels' => 'object',
'ems' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'countries' => null,
'states' => null,
'provinces' => null,
'cities' => null,
'funcs' => null,
'schools' => null,
'cid' => null,
'sid' => null,
'pid' => null,
'cn' => null,
'sft' => null,
'scid' => null,
'hlevels' => null,
'ems' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'countries' => 'countries',
'states' => 'states',
'provinces' => 'provinces',
'cities' => 'cities',
'funcs' => 'funcs',
'schools' => 'schools',
'cid' => 'cid',
'sid' => 'sid',
'pid' => 'pid',
'cn' => 'cn',
'sft' => 'sft',
'scid' => 'scid',
'hlevels' => 'hlevels',
'ems' => 'ems'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'countries' => 'setCountries',
'states' => 'setStates',
'provinces' => 'setProvinces',
'cities' => 'setCities',
'funcs' => 'setFuncs',
'schools' => 'setSchools',
'cid' => 'setCid',
'sid' => 'setSid',
'pid' => 'setPid',
'cn' => 'setCn',
'sft' => 'setSft',
'scid' => 'setScid',
'hlevels' => 'setHlevels',
'ems' => 'setEms'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'countries' => 'getCountries',
'states' => 'getStates',
'provinces' => 'getProvinces',
'cities' => 'getCities',
'funcs' => 'getFuncs',
'schools' => 'getSchools',
'cid' => 'getCid',
'sid' => 'getSid',
'pid' => 'getPid',
'cn' => 'getCn',
'sft' => 'getSft',
'scid' => 'getScid',
'hlevels' => 'getHlevels',
'ems' => 'getEms'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['states'] = isset($data['states']) ? $data['states'] : null;
        $this->container['provinces'] = isset($data['provinces']) ? $data['provinces'] : null;
        $this->container['cities'] = isset($data['cities']) ? $data['cities'] : null;
        $this->container['funcs'] = isset($data['funcs']) ? $data['funcs'] : null;
        $this->container['schools'] = isset($data['schools']) ? $data['schools'] : null;
        $this->container['cid'] = isset($data['cid']) ? $data['cid'] : null;
        $this->container['sid'] = isset($data['sid']) ? $data['sid'] : null;
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['cn'] = isset($data['cn']) ? $data['cn'] : null;
        $this->container['sft'] = isset($data['sft']) ? $data['sft'] : null;
        $this->container['scid'] = isset($data['scid']) ? $data['scid'] : null;
        $this->container['hlevels'] = isset($data['hlevels']) ? $data['hlevels'] : null;
        $this->container['ems'] = isset($data['ems']) ? $data['ems'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets countries
     *
     * @return \Swagger\Client\Model\PrepareEmLoginFormCountries[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param \Swagger\Client\Model\PrepareEmLoginFormCountries[] $countries countries
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets states
     *
     * @return \Swagger\Client\Model\PrepareEmLoginFormCountries[]
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param \Swagger\Client\Model\PrepareEmLoginFormCountries[] $states states
     *
     * @return $this
     */
    public function setStates($states)
    {
        $this->container['states'] = $states;

        return $this;
    }

    /**
     * Gets provinces
     *
     * @return \Swagger\Client\Model\PrepareEmLoginFormCountries[]
     */
    public function getProvinces()
    {
        return $this->container['provinces'];
    }

    /**
     * Sets provinces
     *
     * @param \Swagger\Client\Model\PrepareEmLoginFormCountries[] $provinces provinces
     *
     * @return $this
     */
    public function setProvinces($provinces)
    {
        $this->container['provinces'] = $provinces;

        return $this;
    }

    /**
     * Gets cities
     *
     * @return \Swagger\Client\Model\PrepareEmLoginFormCountries[]
     */
    public function getCities()
    {
        return $this->container['cities'];
    }

    /**
     * Sets cities
     *
     * @param \Swagger\Client\Model\PrepareEmLoginFormCountries[] $cities cities
     *
     * @return $this
     */
    public function setCities($cities)
    {
        $this->container['cities'] = $cities;

        return $this;
    }

    /**
     * Gets funcs
     *
     * @return \Swagger\Client\Model\PrepareEmLoginFormCountries[]
     */
    public function getFuncs()
    {
        return $this->container['funcs'];
    }

    /**
     * Sets funcs
     *
     * @param \Swagger\Client\Model\PrepareEmLoginFormCountries[] $funcs funcs
     *
     * @return $this
     */
    public function setFuncs($funcs)
    {
        $this->container['funcs'] = $funcs;

        return $this;
    }

    /**
     * Gets schools
     *
     * @return \Swagger\Client\Model\PrepareEmLoginFormCountries[]
     */
    public function getSchools()
    {
        return $this->container['schools'];
    }

    /**
     * Sets schools
     *
     * @param \Swagger\Client\Model\PrepareEmLoginFormCountries[] $schools schools
     *
     * @return $this
     */
    public function setSchools($schools)
    {
        $this->container['schools'] = $schools;

        return $this;
    }

    /**
     * Gets cid
     *
     * @return int
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param int $cid cid
     *
     * @return $this
     */
    public function setCid($cid)
    {
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets sid
     *
     * @return int
     */
    public function getSid()
    {
        return $this->container['sid'];
    }

    /**
     * Sets sid
     *
     * @param int $sid sid
     *
     * @return $this
     */
    public function setSid($sid)
    {
        $this->container['sid'] = $sid;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return int
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param int $pid pid
     *
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets cn
     *
     * @return int
     */
    public function getCn()
    {
        return $this->container['cn'];
    }

    /**
     * Sets cn
     *
     * @param int $cn cn
     *
     * @return $this
     */
    public function setCn($cn)
    {
        $this->container['cn'] = $cn;

        return $this;
    }

    /**
     * Gets sft
     *
     * @return int
     */
    public function getSft()
    {
        return $this->container['sft'];
    }

    /**
     * Sets sft
     *
     * @param int $sft sft
     *
     * @return $this
     */
    public function setSft($sft)
    {
        $this->container['sft'] = $sft;

        return $this;
    }

    /**
     * Gets scid
     *
     * @return int
     */
    public function getScid()
    {
        return $this->container['scid'];
    }

    /**
     * Sets scid
     *
     * @param int $scid scid
     *
     * @return $this
     */
    public function setScid($scid)
    {
        $this->container['scid'] = $scid;

        return $this;
    }

    /**
     * Gets hlevels
     *
     * @return object
     */
    public function getHlevels()
    {
        return $this->container['hlevels'];
    }

    /**
     * Sets hlevels
     *
     * @param object $hlevels hlevels
     *
     * @return $this
     */
    public function setHlevels($hlevels)
    {
        $this->container['hlevels'] = $hlevels;

        return $this;
    }

    /**
     * Gets ems
     *
     * @return object
     */
    public function getEms()
    {
        return $this->container['ems'];
    }

    /**
     * Sets ems
     *
     * @param object $ems ems
     *
     * @return $this
     */
    public function setEms($ems)
    {
        $this->container['ems'] = $ems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
