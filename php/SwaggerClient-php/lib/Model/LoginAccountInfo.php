<?php
/**
 * LoginAccountInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LoginAccountInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoginAccountInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Login_accountInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_token' => 'string',
'secure_active_token' => 'string',
'current_organization' => '\Swagger\Client\Model\LoginAccountInfoCurrentOrganization',
'user' => '\Swagger\Client\Model\LoginAccountInfoUser',
'user_roles' => '\Swagger\Client\Model\LoginAccountInfoUserRoles',
'organizations' => '\Swagger\Client\Model\LoginAccountInfoOrganizations[]',
'login_time' => '\DateTime',
'active' => 'bool',
'can_login' => 'bool',
'store_tokens' => 'bool',
'access_token' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_token' => null,
'secure_active_token' => null,
'current_organization' => null,
'user' => null,
'user_roles' => null,
'organizations' => null,
'login_time' => 'date',
'active' => null,
'can_login' => null,
'store_tokens' => null,
'access_token' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_token' => 'activeToken',
'secure_active_token' => 'secureActiveToken',
'current_organization' => 'currentOrganization',
'user' => 'user',
'user_roles' => 'userRoles',
'organizations' => 'organizations',
'login_time' => 'loginTime',
'active' => 'active',
'can_login' => 'canLogin',
'store_tokens' => 'storeTokens',
'access_token' => 'accessToken'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_token' => 'setActiveToken',
'secure_active_token' => 'setSecureActiveToken',
'current_organization' => 'setCurrentOrganization',
'user' => 'setUser',
'user_roles' => 'setUserRoles',
'organizations' => 'setOrganizations',
'login_time' => 'setLoginTime',
'active' => 'setActive',
'can_login' => 'setCanLogin',
'store_tokens' => 'setStoreTokens',
'access_token' => 'setAccessToken'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_token' => 'getActiveToken',
'secure_active_token' => 'getSecureActiveToken',
'current_organization' => 'getCurrentOrganization',
'user' => 'getUser',
'user_roles' => 'getUserRoles',
'organizations' => 'getOrganizations',
'login_time' => 'getLoginTime',
'active' => 'getActive',
'can_login' => 'getCanLogin',
'store_tokens' => 'getStoreTokens',
'access_token' => 'getAccessToken'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_token'] = isset($data['active_token']) ? $data['active_token'] : null;
        $this->container['secure_active_token'] = isset($data['secure_active_token']) ? $data['secure_active_token'] : null;
        $this->container['current_organization'] = isset($data['current_organization']) ? $data['current_organization'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['user_roles'] = isset($data['user_roles']) ? $data['user_roles'] : null;
        $this->container['organizations'] = isset($data['organizations']) ? $data['organizations'] : null;
        $this->container['login_time'] = isset($data['login_time']) ? $data['login_time'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['can_login'] = isset($data['can_login']) ? $data['can_login'] : null;
        $this->container['store_tokens'] = isset($data['store_tokens']) ? $data['store_tokens'] : null;
        $this->container['access_token'] = isset($data['access_token']) ? $data['access_token'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_token
     *
     * @return string
     */
    public function getActiveToken()
    {
        return $this->container['active_token'];
    }

    /**
     * Sets active_token
     *
     * @param string $active_token active_token
     *
     * @return $this
     */
    public function setActiveToken($active_token)
    {
        $this->container['active_token'] = $active_token;

        return $this;
    }

    /**
     * Gets secure_active_token
     *
     * @return string
     */
    public function getSecureActiveToken()
    {
        return $this->container['secure_active_token'];
    }

    /**
     * Sets secure_active_token
     *
     * @param string $secure_active_token secure_active_token
     *
     * @return $this
     */
    public function setSecureActiveToken($secure_active_token)
    {
        $this->container['secure_active_token'] = $secure_active_token;

        return $this;
    }

    /**
     * Gets current_organization
     *
     * @return \Swagger\Client\Model\LoginAccountInfoCurrentOrganization
     */
    public function getCurrentOrganization()
    {
        return $this->container['current_organization'];
    }

    /**
     * Sets current_organization
     *
     * @param \Swagger\Client\Model\LoginAccountInfoCurrentOrganization $current_organization current_organization
     *
     * @return $this
     */
    public function setCurrentOrganization($current_organization)
    {
        $this->container['current_organization'] = $current_organization;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Swagger\Client\Model\LoginAccountInfoUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Swagger\Client\Model\LoginAccountInfoUser $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_roles
     *
     * @return \Swagger\Client\Model\LoginAccountInfoUserRoles
     */
    public function getUserRoles()
    {
        return $this->container['user_roles'];
    }

    /**
     * Sets user_roles
     *
     * @param \Swagger\Client\Model\LoginAccountInfoUserRoles $user_roles user_roles
     *
     * @return $this
     */
    public function setUserRoles($user_roles)
    {
        $this->container['user_roles'] = $user_roles;

        return $this;
    }

    /**
     * Gets organizations
     *
     * @return \Swagger\Client\Model\LoginAccountInfoOrganizations[]
     */
    public function getOrganizations()
    {
        return $this->container['organizations'];
    }

    /**
     * Sets organizations
     *
     * @param \Swagger\Client\Model\LoginAccountInfoOrganizations[] $organizations organizations
     *
     * @return $this
     */
    public function setOrganizations($organizations)
    {
        $this->container['organizations'] = $organizations;

        return $this;
    }

    /**
     * Gets login_time
     *
     * @return \DateTime
     */
    public function getLoginTime()
    {
        return $this->container['login_time'];
    }

    /**
     * Sets login_time
     *
     * @param \DateTime $login_time login_time
     *
     * @return $this
     */
    public function setLoginTime($login_time)
    {
        $this->container['login_time'] = $login_time;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets can_login
     *
     * @return bool
     */
    public function getCanLogin()
    {
        return $this->container['can_login'];
    }

    /**
     * Sets can_login
     *
     * @param bool $can_login can_login
     *
     * @return $this
     */
    public function setCanLogin($can_login)
    {
        $this->container['can_login'] = $can_login;

        return $this;
    }

    /**
     * Gets store_tokens
     *
     * @return bool
     */
    public function getStoreTokens()
    {
        return $this->container['store_tokens'];
    }

    /**
     * Sets store_tokens
     *
     * @param bool $store_tokens store_tokens
     *
     * @return $this
     */
    public function setStoreTokens($store_tokens)
    {
        $this->container['store_tokens'] = $store_tokens;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string $access_token access_token
     *
     * @return $this
     */
    public function setAccessToken($access_token)
    {
        $this->container['access_token'] = $access_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
