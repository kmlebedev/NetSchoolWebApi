<?php
/**
 * LoginBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LoginBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoginBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'login_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'login_type' => 'int',
'cid' => 'int',
'sid' => 'int',
'pid' => 'int',
'cn' => 'int',
'sft' => 'int',
'scid' => 'int',
'un' => 'string',
'pw' => 'string',
'lt' => 'int',
'pw2' => 'string',
'ver' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'login_type' => null,
'cid' => null,
'sid' => null,
'pid' => null,
'cn' => null,
'sft' => null,
'scid' => null,
'un' => null,
'pw' => null,
'lt' => null,
'pw2' => null,
'ver' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'login_type' => 'LoginType',
'cid' => 'cid',
'sid' => 'sid',
'pid' => 'pid',
'cn' => 'cn',
'sft' => 'sft',
'scid' => 'scid',
'un' => 'UN',
'pw' => 'PW',
'lt' => 'lt',
'pw2' => 'pw2',
'ver' => 'ver'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'login_type' => 'setLoginType',
'cid' => 'setCid',
'sid' => 'setSid',
'pid' => 'setPid',
'cn' => 'setCn',
'sft' => 'setSft',
'scid' => 'setScid',
'un' => 'setUn',
'pw' => 'setPw',
'lt' => 'setLt',
'pw2' => 'setPw2',
'ver' => 'setVer'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'login_type' => 'getLoginType',
'cid' => 'getCid',
'sid' => 'getSid',
'pid' => 'getPid',
'cn' => 'getCn',
'sft' => 'getSft',
'scid' => 'getScid',
'un' => 'getUn',
'pw' => 'getPw',
'lt' => 'getLt',
'pw2' => 'getPw2',
'ver' => 'getVer'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['login_type'] = isset($data['login_type']) ? $data['login_type'] : null;
        $this->container['cid'] = isset($data['cid']) ? $data['cid'] : null;
        $this->container['sid'] = isset($data['sid']) ? $data['sid'] : null;
        $this->container['pid'] = isset($data['pid']) ? $data['pid'] : null;
        $this->container['cn'] = isset($data['cn']) ? $data['cn'] : null;
        $this->container['sft'] = isset($data['sft']) ? $data['sft'] : null;
        $this->container['scid'] = isset($data['scid']) ? $data['scid'] : null;
        $this->container['un'] = isset($data['un']) ? $data['un'] : null;
        $this->container['pw'] = isset($data['pw']) ? $data['pw'] : null;
        $this->container['lt'] = isset($data['lt']) ? $data['lt'] : null;
        $this->container['pw2'] = isset($data['pw2']) ? $data['pw2'] : null;
        $this->container['ver'] = isset($data['ver']) ? $data['ver'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets login_type
     *
     * @return int
     */
    public function getLoginType()
    {
        return $this->container['login_type'];
    }

    /**
     * Sets login_type
     *
     * @param int $login_type login_type
     *
     * @return $this
     */
    public function setLoginType($login_type)
    {
        $this->container['login_type'] = $login_type;

        return $this;
    }

    /**
     * Gets cid
     *
     * @return int
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param int $cid cid
     *
     * @return $this
     */
    public function setCid($cid)
    {
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets sid
     *
     * @return int
     */
    public function getSid()
    {
        return $this->container['sid'];
    }

    /**
     * Sets sid
     *
     * @param int $sid sid
     *
     * @return $this
     */
    public function setSid($sid)
    {
        $this->container['sid'] = $sid;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return int
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param int $pid pid
     *
     * @return $this
     */
    public function setPid($pid)
    {
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets cn
     *
     * @return int
     */
    public function getCn()
    {
        return $this->container['cn'];
    }

    /**
     * Sets cn
     *
     * @param int $cn cn
     *
     * @return $this
     */
    public function setCn($cn)
    {
        $this->container['cn'] = $cn;

        return $this;
    }

    /**
     * Gets sft
     *
     * @return int
     */
    public function getSft()
    {
        return $this->container['sft'];
    }

    /**
     * Sets sft
     *
     * @param int $sft sft
     *
     * @return $this
     */
    public function setSft($sft)
    {
        $this->container['sft'] = $sft;

        return $this;
    }

    /**
     * Gets scid
     *
     * @return int
     */
    public function getScid()
    {
        return $this->container['scid'];
    }

    /**
     * Sets scid
     *
     * @param int $scid scid
     *
     * @return $this
     */
    public function setScid($scid)
    {
        $this->container['scid'] = $scid;

        return $this;
    }

    /**
     * Gets un
     *
     * @return string
     */
    public function getUn()
    {
        return $this->container['un'];
    }

    /**
     * Sets un
     *
     * @param string $un un
     *
     * @return $this
     */
    public function setUn($un)
    {
        $this->container['un'] = $un;

        return $this;
    }

    /**
     * Gets pw
     *
     * @return string
     */
    public function getPw()
    {
        return $this->container['pw'];
    }

    /**
     * Sets pw
     *
     * @param string $pw pw
     *
     * @return $this
     */
    public function setPw($pw)
    {
        $this->container['pw'] = $pw;

        return $this;
    }

    /**
     * Gets lt
     *
     * @return int
     */
    public function getLt()
    {
        return $this->container['lt'];
    }

    /**
     * Sets lt
     *
     * @param int $lt lt
     *
     * @return $this
     */
    public function setLt($lt)
    {
        $this->container['lt'] = $lt;

        return $this;
    }

    /**
     * Gets pw2
     *
     * @return string
     */
    public function getPw2()
    {
        return $this->container['pw2'];
    }

    /**
     * Sets pw2
     *
     * @param string $pw2 pw2
     *
     * @return $this
     */
    public function setPw2($pw2)
    {
        $this->container['pw2'] = $pw2;

        return $this;
    }

    /**
     * Gets ver
     *
     * @return int
     */
    public function getVer()
    {
        return $this->container['ver'];
    }

    /**
     * Sets ver
     *
     * @param int $ver ver
     *
     * @return $this
     */
    public function setVer($ver)
    {
        $this->container['ver'] = $ver;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
