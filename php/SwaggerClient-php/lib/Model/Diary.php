<?php
/**
 * Diary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Diary Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Diary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Diary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'week_start' => 'string',
'week_end' => 'string',
'week_days' => '\Swagger\Client\Model\DiaryWeekDays[]',
'term_name' => 'string',
'class_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'week_start' => null,
'week_end' => null,
'week_days' => null,
'term_name' => null,
'class_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'week_start' => 'weekStart',
'week_end' => 'weekEnd',
'week_days' => 'weekDays',
'term_name' => 'termName',
'class_name' => 'className'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'week_start' => 'setWeekStart',
'week_end' => 'setWeekEnd',
'week_days' => 'setWeekDays',
'term_name' => 'setTermName',
'class_name' => 'setClassName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'week_start' => 'getWeekStart',
'week_end' => 'getWeekEnd',
'week_days' => 'getWeekDays',
'term_name' => 'getTermName',
'class_name' => 'getClassName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['week_start'] = isset($data['week_start']) ? $data['week_start'] : null;
        $this->container['week_end'] = isset($data['week_end']) ? $data['week_end'] : null;
        $this->container['week_days'] = isset($data['week_days']) ? $data['week_days'] : null;
        $this->container['term_name'] = isset($data['term_name']) ? $data['term_name'] : null;
        $this->container['class_name'] = isset($data['class_name']) ? $data['class_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets week_start
     *
     * @return string
     */
    public function getWeekStart()
    {
        return $this->container['week_start'];
    }

    /**
     * Sets week_start
     *
     * @param string $week_start week_start
     *
     * @return $this
     */
    public function setWeekStart($week_start)
    {
        $this->container['week_start'] = $week_start;

        return $this;
    }

    /**
     * Gets week_end
     *
     * @return string
     */
    public function getWeekEnd()
    {
        return $this->container['week_end'];
    }

    /**
     * Sets week_end
     *
     * @param string $week_end week_end
     *
     * @return $this
     */
    public function setWeekEnd($week_end)
    {
        $this->container['week_end'] = $week_end;

        return $this;
    }

    /**
     * Gets week_days
     *
     * @return \Swagger\Client\Model\DiaryWeekDays[]
     */
    public function getWeekDays()
    {
        return $this->container['week_days'];
    }

    /**
     * Sets week_days
     *
     * @param \Swagger\Client\Model\DiaryWeekDays[] $week_days week_days
     *
     * @return $this
     */
    public function setWeekDays($week_days)
    {
        $this->container['week_days'] = $week_days;

        return $this;
    }

    /**
     * Gets term_name
     *
     * @return string
     */
    public function getTermName()
    {
        return $this->container['term_name'];
    }

    /**
     * Sets term_name
     *
     * @param string $term_name term_name
     *
     * @return $this
     */
    public function setTermName($term_name)
    {
        $this->container['term_name'] = $term_name;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string $class_name class_name
     *
     * @return $this
     */
    public function setClassName($class_name)
    {
        $this->container['class_name'] = $class_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
