/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 4.30.43656
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILoginApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all login data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LoginData</returns>
        LoginData Logindata ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all login data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LoginData</returns>
        ApiResponse<LoginData> LogindataWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all prepareemloginform
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>PrepareEmLoginForm</returns>
        PrepareEmLoginForm Prepareemloginform (string cacheVer = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all prepareemloginform
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>ApiResponse of PrepareEmLoginForm</returns>
        ApiResponse<PrepareEmLoginForm> PrepareemloginformWithHttpInfo (string cacheVer = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all prepareloginform
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>PrepareLoginForm</returns>
        PrepareLoginForm Prepareloginform (string cacheVer = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all prepareloginform
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>ApiResponse of PrepareLoginForm</returns>
        ApiResponse<PrepareLoginForm> PrepareloginformWithHttpInfo (string cacheVer = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all login data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LoginData</returns>
        System.Threading.Tasks.Task<LoginData> LogindataAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all login data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LoginData)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginData>> LogindataAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all prepareemloginform
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>Task of PrepareEmLoginForm</returns>
        System.Threading.Tasks.Task<PrepareEmLoginForm> PrepareemloginformAsync (string cacheVer = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all prepareemloginform
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>Task of ApiResponse (PrepareEmLoginForm)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrepareEmLoginForm>> PrepareemloginformAsyncWithHttpInfo (string cacheVer = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all prepareloginform
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>Task of PrepareLoginForm</returns>
        System.Threading.Tasks.Task<PrepareLoginForm> PrepareloginformAsync (string cacheVer = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all prepareloginform
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>Task of ApiResponse (PrepareLoginForm)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrepareLoginForm>> PrepareloginformAsyncWithHttpInfo (string cacheVer = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LoginApi : ILoginApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoginApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class
        /// </summary>
        /// <returns></returns>
        public LoginApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoginApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  returns all login data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LoginData</returns>
        public LoginData Logindata ()
        {
             ApiResponse<LoginData> localVarResponse = LogindataWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  returns all login data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LoginData</returns>
        public ApiResponse< LoginData > LogindataWithHttpInfo ()
        {

            var localVarPath = "/logindata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logindata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoginData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoginData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoginData)));
        }

        /// <summary>
        ///  returns all login data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LoginData</returns>
        public async System.Threading.Tasks.Task<LoginData> LogindataAsync ()
        {
             ApiResponse<LoginData> localVarResponse = await LogindataAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  returns all login data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LoginData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoginData>> LogindataAsyncWithHttpInfo ()
        {

            var localVarPath = "/logindata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logindata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoginData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoginData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoginData)));
        }

        /// <summary>
        ///  returns all prepareemloginform
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>PrepareEmLoginForm</returns>
        public PrepareEmLoginForm Prepareemloginform (string cacheVer = null)
        {
             ApiResponse<PrepareEmLoginForm> localVarResponse = PrepareemloginformWithHttpInfo(cacheVer);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  returns all prepareemloginform
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>ApiResponse of PrepareEmLoginForm</returns>
        public ApiResponse< PrepareEmLoginForm > PrepareemloginformWithHttpInfo (string cacheVer = null)
        {

            var localVarPath = "/prepareemloginform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheVer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cacheVer", cacheVer)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Prepareemloginform", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrepareEmLoginForm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrepareEmLoginForm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrepareEmLoginForm)));
        }

        /// <summary>
        ///  returns all prepareemloginform
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>Task of PrepareEmLoginForm</returns>
        public async System.Threading.Tasks.Task<PrepareEmLoginForm> PrepareemloginformAsync (string cacheVer = null)
        {
             ApiResponse<PrepareEmLoginForm> localVarResponse = await PrepareemloginformAsyncWithHttpInfo(cacheVer);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  returns all prepareemloginform
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>Task of ApiResponse (PrepareEmLoginForm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrepareEmLoginForm>> PrepareemloginformAsyncWithHttpInfo (string cacheVer = null)
        {

            var localVarPath = "/prepareemloginform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheVer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cacheVer", cacheVer)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Prepareemloginform", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrepareEmLoginForm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrepareEmLoginForm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrepareEmLoginForm)));
        }

        /// <summary>
        ///  returns all prepareloginform
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>PrepareLoginForm</returns>
        public PrepareLoginForm Prepareloginform (string cacheVer = null)
        {
             ApiResponse<PrepareLoginForm> localVarResponse = PrepareloginformWithHttpInfo(cacheVer);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  returns all prepareloginform
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>ApiResponse of PrepareLoginForm</returns>
        public ApiResponse< PrepareLoginForm > PrepareloginformWithHttpInfo (string cacheVer = null)
        {

            var localVarPath = "/prepareloginform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheVer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cacheVer", cacheVer)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Prepareloginform", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrepareLoginForm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrepareLoginForm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrepareLoginForm)));
        }

        /// <summary>
        ///  returns all prepareloginform
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>Task of PrepareLoginForm</returns>
        public async System.Threading.Tasks.Task<PrepareLoginForm> PrepareloginformAsync (string cacheVer = null)
        {
             ApiResponse<PrepareLoginForm> localVarResponse = await PrepareloginformAsyncWithHttpInfo(cacheVer);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  returns all prepareloginform
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheVer"> (optional)</param>
        /// <returns>Task of ApiResponse (PrepareLoginForm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrepareLoginForm>> PrepareloginformAsyncWithHttpInfo (string cacheVer = null)
        {

            var localVarPath = "/prepareloginform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cacheVer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cacheVer", cacheVer)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Prepareloginform", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrepareLoginForm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrepareLoginForm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrepareLoginForm)));
        }

    }
}
