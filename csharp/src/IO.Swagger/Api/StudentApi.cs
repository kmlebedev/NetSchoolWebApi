/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 4.30.43656
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IStudentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all assignments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="weekStart"> (optional)</param>
        /// <param name="weekEnd"> (optional)</param>
        /// <param name="withLaAssigns"> (optional)</param>
        /// <param name="withPastMandatory"> (optional)</param>
        /// <param name="yearId"> (optional)</param>
        /// <returns>Diary</returns>
        Diary StudentDiary (int? studentId, DateTime? weekStart = null, DateTime? weekEnd = null, bool? withLaAssigns = null, bool? withPastMandatory = null, int? yearId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all assignments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="weekStart"> (optional)</param>
        /// <param name="weekEnd"> (optional)</param>
        /// <param name="withLaAssigns"> (optional)</param>
        /// <param name="withPastMandatory"> (optional)</param>
        /// <param name="yearId"> (optional)</param>
        /// <returns>ApiResponse of Diary</returns>
        ApiResponse<Diary> StudentDiaryWithHttpInfo (int? studentId, DateTime? weekStart = null, DateTime? weekEnd = null, bool? withLaAssigns = null, bool? withPastMandatory = null, int? yearId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns strudent diary init data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StudentDiaryInit</returns>
        StudentDiaryInit StudentDiaryInit ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns strudent diary init data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StudentDiaryInit</returns>
        ApiResponse<StudentDiaryInit> StudentDiaryInitWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all assignments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="weekStart"> (optional)</param>
        /// <param name="weekEnd"> (optional)</param>
        /// <param name="withLaAssigns"> (optional)</param>
        /// <param name="withPastMandatory"> (optional)</param>
        /// <param name="yearId"> (optional)</param>
        /// <returns>Task of Diary</returns>
        System.Threading.Tasks.Task<Diary> StudentDiaryAsync (int? studentId, DateTime? weekStart = null, DateTime? weekEnd = null, bool? withLaAssigns = null, bool? withPastMandatory = null, int? yearId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all assignments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="weekStart"> (optional)</param>
        /// <param name="weekEnd"> (optional)</param>
        /// <param name="withLaAssigns"> (optional)</param>
        /// <param name="withPastMandatory"> (optional)</param>
        /// <param name="yearId"> (optional)</param>
        /// <returns>Task of ApiResponse (Diary)</returns>
        System.Threading.Tasks.Task<ApiResponse<Diary>> StudentDiaryAsyncWithHttpInfo (int? studentId, DateTime? weekStart = null, DateTime? weekEnd = null, bool? withLaAssigns = null, bool? withPastMandatory = null, int? yearId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns strudent diary init data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StudentDiaryInit</returns>
        System.Threading.Tasks.Task<StudentDiaryInit> StudentDiaryInitAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns strudent diary init data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StudentDiaryInit)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentDiaryInit>> StudentDiaryInitAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class StudentApi : IStudentApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentApi"/> class
        /// </summary>
        /// <returns></returns>
        public StudentApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StudentApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  returns all assignments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="weekStart"> (optional)</param>
        /// <param name="weekEnd"> (optional)</param>
        /// <param name="withLaAssigns"> (optional)</param>
        /// <param name="withPastMandatory"> (optional)</param>
        /// <param name="yearId"> (optional)</param>
        /// <returns>Diary</returns>
        public Diary StudentDiary (int? studentId, DateTime? weekStart = null, DateTime? weekEnd = null, bool? withLaAssigns = null, bool? withPastMandatory = null, int? yearId = null)
        {
             ApiResponse<Diary> localVarResponse = StudentDiaryWithHttpInfo(studentId, weekStart, weekEnd, withLaAssigns, withPastMandatory, yearId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  returns all assignments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="weekStart"> (optional)</param>
        /// <param name="weekEnd"> (optional)</param>
        /// <param name="withLaAssigns"> (optional)</param>
        /// <param name="withPastMandatory"> (optional)</param>
        /// <param name="yearId"> (optional)</param>
        /// <returns>ApiResponse of Diary</returns>
        public ApiResponse< Diary > StudentDiaryWithHttpInfo (int? studentId, DateTime? weekStart = null, DateTime? weekEnd = null, bool? withLaAssigns = null, bool? withPastMandatory = null, int? yearId = null)
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new ApiException(400, "Missing required parameter 'studentId' when calling StudentApi->StudentDiary");

            var localVarPath = "/student/diary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (studentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "studentId", studentId)); // query parameter
            if (weekStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "weekStart", weekStart)); // query parameter
            if (weekEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "weekEnd", weekEnd)); // query parameter
            if (withLaAssigns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withLaAssigns", withLaAssigns)); // query parameter
            if (withPastMandatory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withPastMandatory", withPastMandatory)); // query parameter
            if (yearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "yearId", yearId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StudentDiary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Diary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Diary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Diary)));
        }

        /// <summary>
        ///  returns all assignments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="weekStart"> (optional)</param>
        /// <param name="weekEnd"> (optional)</param>
        /// <param name="withLaAssigns"> (optional)</param>
        /// <param name="withPastMandatory"> (optional)</param>
        /// <param name="yearId"> (optional)</param>
        /// <returns>Task of Diary</returns>
        public async System.Threading.Tasks.Task<Diary> StudentDiaryAsync (int? studentId, DateTime? weekStart = null, DateTime? weekEnd = null, bool? withLaAssigns = null, bool? withPastMandatory = null, int? yearId = null)
        {
             ApiResponse<Diary> localVarResponse = await StudentDiaryAsyncWithHttpInfo(studentId, weekStart, weekEnd, withLaAssigns, withPastMandatory, yearId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  returns all assignments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="weekStart"> (optional)</param>
        /// <param name="weekEnd"> (optional)</param>
        /// <param name="withLaAssigns"> (optional)</param>
        /// <param name="withPastMandatory"> (optional)</param>
        /// <param name="yearId"> (optional)</param>
        /// <returns>Task of ApiResponse (Diary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Diary>> StudentDiaryAsyncWithHttpInfo (int? studentId, DateTime? weekStart = null, DateTime? weekEnd = null, bool? withLaAssigns = null, bool? withPastMandatory = null, int? yearId = null)
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new ApiException(400, "Missing required parameter 'studentId' when calling StudentApi->StudentDiary");

            var localVarPath = "/student/diary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (studentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "studentId", studentId)); // query parameter
            if (weekStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "weekStart", weekStart)); // query parameter
            if (weekEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "weekEnd", weekEnd)); // query parameter
            if (withLaAssigns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withLaAssigns", withLaAssigns)); // query parameter
            if (withPastMandatory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withPastMandatory", withPastMandatory)); // query parameter
            if (yearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "yearId", yearId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StudentDiary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Diary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Diary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Diary)));
        }

        /// <summary>
        ///  returns strudent diary init data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StudentDiaryInit</returns>
        public StudentDiaryInit StudentDiaryInit ()
        {
             ApiResponse<StudentDiaryInit> localVarResponse = StudentDiaryInitWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  returns strudent diary init data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StudentDiaryInit</returns>
        public ApiResponse< StudentDiaryInit > StudentDiaryInitWithHttpInfo ()
        {

            var localVarPath = "/student/diary/init";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StudentDiaryInit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentDiaryInit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StudentDiaryInit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentDiaryInit)));
        }

        /// <summary>
        ///  returns strudent diary init data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StudentDiaryInit</returns>
        public async System.Threading.Tasks.Task<StudentDiaryInit> StudentDiaryInitAsync ()
        {
             ApiResponse<StudentDiaryInit> localVarResponse = await StudentDiaryInitAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  returns strudent diary init data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StudentDiaryInit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentDiaryInit>> StudentDiaryInitAsyncWithHttpInfo ()
        {

            var localVarPath = "/student/diary/init";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StudentDiaryInit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentDiaryInit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StudentDiaryInit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentDiaryInit)));
        }

    }
}
