/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 4.30.43656
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Diary
    /// </summary>
    [DataContract]
        public partial class Diary :  IEquatable<Diary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Diary" /> class.
        /// </summary>
        /// <param name="weekStart">weekStart.</param>
        /// <param name="weekEnd">weekEnd.</param>
        /// <param name="weekDays">weekDays.</param>
        /// <param name="termName">termName.</param>
        /// <param name="className">className.</param>
        public Diary(string weekStart = default(string), string weekEnd = default(string), List<DiaryWeekDays> weekDays = default(List<DiaryWeekDays>), string termName = default(string), string className = default(string))
        {
            this.WeekStart = weekStart;
            this.WeekEnd = weekEnd;
            this.WeekDays = weekDays;
            this.TermName = termName;
            this.ClassName = className;
        }
        
        /// <summary>
        /// Gets or Sets WeekStart
        /// </summary>
        [DataMember(Name="weekStart", EmitDefaultValue=false)]
        public string WeekStart { get; set; }

        /// <summary>
        /// Gets or Sets WeekEnd
        /// </summary>
        [DataMember(Name="weekEnd", EmitDefaultValue=false)]
        public string WeekEnd { get; set; }

        /// <summary>
        /// Gets or Sets WeekDays
        /// </summary>
        [DataMember(Name="weekDays", EmitDefaultValue=false)]
        public List<DiaryWeekDays> WeekDays { get; set; }

        /// <summary>
        /// Gets or Sets TermName
        /// </summary>
        [DataMember(Name="termName", EmitDefaultValue=false)]
        public string TermName { get; set; }

        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [DataMember(Name="className", EmitDefaultValue=false)]
        public string ClassName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Diary {\n");
            sb.Append("  WeekStart: ").Append(WeekStart).Append("\n");
            sb.Append("  WeekEnd: ").Append(WeekEnd).Append("\n");
            sb.Append("  WeekDays: ").Append(WeekDays).Append("\n");
            sb.Append("  TermName: ").Append(TermName).Append("\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Diary);
        }

        /// <summary>
        /// Returns true if Diary instances are equal
        /// </summary>
        /// <param name="input">Instance of Diary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Diary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WeekStart == input.WeekStart ||
                    (this.WeekStart != null &&
                    this.WeekStart.Equals(input.WeekStart))
                ) && 
                (
                    this.WeekEnd == input.WeekEnd ||
                    (this.WeekEnd != null &&
                    this.WeekEnd.Equals(input.WeekEnd))
                ) && 
                (
                    this.WeekDays == input.WeekDays ||
                    this.WeekDays != null &&
                    input.WeekDays != null &&
                    this.WeekDays.SequenceEqual(input.WeekDays)
                ) && 
                (
                    this.TermName == input.TermName ||
                    (this.TermName != null &&
                    this.TermName.Equals(input.TermName))
                ) && 
                (
                    this.ClassName == input.ClassName ||
                    (this.ClassName != null &&
                    this.ClassName.Equals(input.ClassName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WeekStart != null)
                    hashCode = hashCode * 59 + this.WeekStart.GetHashCode();
                if (this.WeekEnd != null)
                    hashCode = hashCode * 59 + this.WeekEnd.GetHashCode();
                if (this.WeekDays != null)
                    hashCode = hashCode * 59 + this.WeekDays.GetHashCode();
                if (this.TermName != null)
                    hashCode = hashCode * 59 + this.TermName.GetHashCode();
                if (this.ClassName != null)
                    hashCode = hashCode * 59 + this.ClassName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
