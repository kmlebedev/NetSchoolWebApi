/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 4.30.43656
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PrepareLoginForm
    /// </summary>
    [DataContract]
        public partial class PrepareLoginForm :  IEquatable<PrepareLoginForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareLoginForm" /> class.
        /// </summary>
        /// <param name="countries">countries.</param>
        /// <param name="states">states.</param>
        /// <param name="provinces">provinces.</param>
        /// <param name="cities">cities.</param>
        /// <param name="funcs">funcs.</param>
        /// <param name="schools">schools.</param>
        /// <param name="cid">cid.</param>
        /// <param name="sid">sid.</param>
        /// <param name="pid">pid.</param>
        /// <param name="cn">cn.</param>
        /// <param name="sft">sft.</param>
        /// <param name="scid">scid.</param>
        /// <param name="hlevels">hlevels.</param>
        /// <param name="ems">ems.</param>
        public PrepareLoginForm(List<PrepareEmLoginFormCountries> countries = default(List<PrepareEmLoginFormCountries>), List<PrepareEmLoginFormCountries> states = default(List<PrepareEmLoginFormCountries>), List<PrepareEmLoginFormCountries> provinces = default(List<PrepareEmLoginFormCountries>), List<PrepareEmLoginFormCountries> cities = default(List<PrepareEmLoginFormCountries>), List<PrepareEmLoginFormCountries> funcs = default(List<PrepareEmLoginFormCountries>), List<PrepareEmLoginFormCountries> schools = default(List<PrepareEmLoginFormCountries>), int? cid = default(int?), int? sid = default(int?), int? pid = default(int?), int? cn = default(int?), int? sft = default(int?), int? scid = default(int?), Object hlevels = default(Object), Object ems = default(Object))
        {
            this.Countries = countries;
            this.States = states;
            this.Provinces = provinces;
            this.Cities = cities;
            this.Funcs = funcs;
            this.Schools = schools;
            this.Cid = cid;
            this.Sid = sid;
            this.Pid = pid;
            this.Cn = cn;
            this.Sft = sft;
            this.Scid = scid;
            this.Hlevels = hlevels;
            this.Ems = ems;
        }
        
        /// <summary>
        /// Gets or Sets Countries
        /// </summary>
        [DataMember(Name="countries", EmitDefaultValue=false)]
        public List<PrepareEmLoginFormCountries> Countries { get; set; }

        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [DataMember(Name="states", EmitDefaultValue=false)]
        public List<PrepareEmLoginFormCountries> States { get; set; }

        /// <summary>
        /// Gets or Sets Provinces
        /// </summary>
        [DataMember(Name="provinces", EmitDefaultValue=false)]
        public List<PrepareEmLoginFormCountries> Provinces { get; set; }

        /// <summary>
        /// Gets or Sets Cities
        /// </summary>
        [DataMember(Name="cities", EmitDefaultValue=false)]
        public List<PrepareEmLoginFormCountries> Cities { get; set; }

        /// <summary>
        /// Gets or Sets Funcs
        /// </summary>
        [DataMember(Name="funcs", EmitDefaultValue=false)]
        public List<PrepareEmLoginFormCountries> Funcs { get; set; }

        /// <summary>
        /// Gets or Sets Schools
        /// </summary>
        [DataMember(Name="schools", EmitDefaultValue=false)]
        public List<PrepareEmLoginFormCountries> Schools { get; set; }

        /// <summary>
        /// Gets or Sets Cid
        /// </summary>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public int? Cid { get; set; }

        /// <summary>
        /// Gets or Sets Sid
        /// </summary>
        [DataMember(Name="sid", EmitDefaultValue=false)]
        public int? Sid { get; set; }

        /// <summary>
        /// Gets or Sets Pid
        /// </summary>
        [DataMember(Name="pid", EmitDefaultValue=false)]
        public int? Pid { get; set; }

        /// <summary>
        /// Gets or Sets Cn
        /// </summary>
        [DataMember(Name="cn", EmitDefaultValue=false)]
        public int? Cn { get; set; }

        /// <summary>
        /// Gets or Sets Sft
        /// </summary>
        [DataMember(Name="sft", EmitDefaultValue=false)]
        public int? Sft { get; set; }

        /// <summary>
        /// Gets or Sets Scid
        /// </summary>
        [DataMember(Name="scid", EmitDefaultValue=false)]
        public int? Scid { get; set; }

        /// <summary>
        /// Gets or Sets Hlevels
        /// </summary>
        [DataMember(Name="hlevels", EmitDefaultValue=false)]
        public Object Hlevels { get; set; }

        /// <summary>
        /// Gets or Sets Ems
        /// </summary>
        [DataMember(Name="ems", EmitDefaultValue=false)]
        public Object Ems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrepareLoginForm {\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  Provinces: ").Append(Provinces).Append("\n");
            sb.Append("  Cities: ").Append(Cities).Append("\n");
            sb.Append("  Funcs: ").Append(Funcs).Append("\n");
            sb.Append("  Schools: ").Append(Schools).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  Cn: ").Append(Cn).Append("\n");
            sb.Append("  Sft: ").Append(Sft).Append("\n");
            sb.Append("  Scid: ").Append(Scid).Append("\n");
            sb.Append("  Hlevels: ").Append(Hlevels).Append("\n");
            sb.Append("  Ems: ").Append(Ems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepareLoginForm);
        }

        /// <summary>
        /// Returns true if PrepareLoginForm instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepareLoginForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepareLoginForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Countries == input.Countries ||
                    this.Countries != null &&
                    input.Countries != null &&
                    this.Countries.SequenceEqual(input.Countries)
                ) && 
                (
                    this.States == input.States ||
                    this.States != null &&
                    input.States != null &&
                    this.States.SequenceEqual(input.States)
                ) && 
                (
                    this.Provinces == input.Provinces ||
                    this.Provinces != null &&
                    input.Provinces != null &&
                    this.Provinces.SequenceEqual(input.Provinces)
                ) && 
                (
                    this.Cities == input.Cities ||
                    this.Cities != null &&
                    input.Cities != null &&
                    this.Cities.SequenceEqual(input.Cities)
                ) && 
                (
                    this.Funcs == input.Funcs ||
                    this.Funcs != null &&
                    input.Funcs != null &&
                    this.Funcs.SequenceEqual(input.Funcs)
                ) && 
                (
                    this.Schools == input.Schools ||
                    this.Schools != null &&
                    input.Schools != null &&
                    this.Schools.SequenceEqual(input.Schools)
                ) && 
                (
                    this.Cid == input.Cid ||
                    (this.Cid != null &&
                    this.Cid.Equals(input.Cid))
                ) && 
                (
                    this.Sid == input.Sid ||
                    (this.Sid != null &&
                    this.Sid.Equals(input.Sid))
                ) && 
                (
                    this.Pid == input.Pid ||
                    (this.Pid != null &&
                    this.Pid.Equals(input.Pid))
                ) && 
                (
                    this.Cn == input.Cn ||
                    (this.Cn != null &&
                    this.Cn.Equals(input.Cn))
                ) && 
                (
                    this.Sft == input.Sft ||
                    (this.Sft != null &&
                    this.Sft.Equals(input.Sft))
                ) && 
                (
                    this.Scid == input.Scid ||
                    (this.Scid != null &&
                    this.Scid.Equals(input.Scid))
                ) && 
                (
                    this.Hlevels == input.Hlevels ||
                    (this.Hlevels != null &&
                    this.Hlevels.Equals(input.Hlevels))
                ) && 
                (
                    this.Ems == input.Ems ||
                    (this.Ems != null &&
                    this.Ems.Equals(input.Ems))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Countries != null)
                    hashCode = hashCode * 59 + this.Countries.GetHashCode();
                if (this.States != null)
                    hashCode = hashCode * 59 + this.States.GetHashCode();
                if (this.Provinces != null)
                    hashCode = hashCode * 59 + this.Provinces.GetHashCode();
                if (this.Cities != null)
                    hashCode = hashCode * 59 + this.Cities.GetHashCode();
                if (this.Funcs != null)
                    hashCode = hashCode * 59 + this.Funcs.GetHashCode();
                if (this.Schools != null)
                    hashCode = hashCode * 59 + this.Schools.GetHashCode();
                if (this.Cid != null)
                    hashCode = hashCode * 59 + this.Cid.GetHashCode();
                if (this.Sid != null)
                    hashCode = hashCode * 59 + this.Sid.GetHashCode();
                if (this.Pid != null)
                    hashCode = hashCode * 59 + this.Pid.GetHashCode();
                if (this.Cn != null)
                    hashCode = hashCode * 59 + this.Cn.GetHashCode();
                if (this.Sft != null)
                    hashCode = hashCode * 59 + this.Sft.GetHashCode();
                if (this.Scid != null)
                    hashCode = hashCode * 59 + this.Scid.GetHashCode();
                if (this.Hlevels != null)
                    hashCode = hashCode * 59 + this.Hlevels.GetHashCode();
                if (this.Ems != null)
                    hashCode = hashCode * 59 + this.Ems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
