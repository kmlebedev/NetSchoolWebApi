/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DiaryLesson
    /// </summary>
    [DataContract]
        public partial class DiaryLesson :  IEquatable<DiaryLesson>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiaryLesson" /> class.
        /// </summary>
        /// <param name="classmeetingId">classmeetingId.</param>
        /// <param name="day">day.</param>
        /// <param name="number">number.</param>
        /// <param name="room">room.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="subjectName">subjectName.</param>
        /// <param name="assignments">assignments.</param>
        public DiaryLesson(string classmeetingId = default(string), DateTime? day = default(DateTime?), int? number = default(int?), string room = default(string), string startTime = default(string), string endTime = default(string), string subjectName = default(string), List<DiaryAssignment> assignments = default(List<DiaryAssignment>))
        {
            this.ClassmeetingId = classmeetingId;
            this.Day = day;
            this.Number = number;
            this.Room = room;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.SubjectName = subjectName;
            this.Assignments = assignments;
        }
        
        /// <summary>
        /// Gets or Sets ClassmeetingId
        /// </summary>
        [DataMember(Name="classmeetingId", EmitDefaultValue=false)]
        public string ClassmeetingId { get; set; }

        /// <summary>
        /// Gets or Sets Day
        /// </summary>
        [DataMember(Name="day", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Day { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or Sets Room
        /// </summary>
        [DataMember(Name="room", EmitDefaultValue=false)]
        public string Room { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or Sets SubjectName
        /// </summary>
        [DataMember(Name="subjectName", EmitDefaultValue=false)]
        public string SubjectName { get; set; }

        /// <summary>
        /// Gets or Sets Assignments
        /// </summary>
        [DataMember(Name="assignments", EmitDefaultValue=false)]
        public List<DiaryAssignment> Assignments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiaryLesson {\n");
            sb.Append("  ClassmeetingId: ").Append(ClassmeetingId).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Room: ").Append(Room).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  SubjectName: ").Append(SubjectName).Append("\n");
            sb.Append("  Assignments: ").Append(Assignments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiaryLesson);
        }

        /// <summary>
        /// Returns true if DiaryLesson instances are equal
        /// </summary>
        /// <param name="input">Instance of DiaryLesson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiaryLesson input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClassmeetingId == input.ClassmeetingId ||
                    (this.ClassmeetingId != null &&
                    this.ClassmeetingId.Equals(input.ClassmeetingId))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Room == input.Room ||
                    (this.Room != null &&
                    this.Room.Equals(input.Room))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.SubjectName == input.SubjectName ||
                    (this.SubjectName != null &&
                    this.SubjectName.Equals(input.SubjectName))
                ) && 
                (
                    this.Assignments == input.Assignments ||
                    this.Assignments != null &&
                    input.Assignments != null &&
                    this.Assignments.SequenceEqual(input.Assignments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClassmeetingId != null)
                    hashCode = hashCode * 59 + this.ClassmeetingId.GetHashCode();
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Room != null)
                    hashCode = hashCode * 59 + this.Room.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.SubjectName != null)
                    hashCode = hashCode * 59 + this.SubjectName.GetHashCode();
                if (this.Assignments != null)
                    hashCode = hashCode * 59 + this.Assignments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
