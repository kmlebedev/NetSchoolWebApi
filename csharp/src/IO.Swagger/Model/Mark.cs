/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 4.30.43656
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Mark
    /// </summary>
    [DataContract]
        public partial class Mark :  IEquatable<Mark>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Mark" /> class.
        /// </summary>
        /// <param name="assignmentId">assignmentId.</param>
        /// <param name="studentId">studentId.</param>
        /// <param name="mark">mark.</param>
        /// <param name="dutyMark">dutyMark.</param>
        public Mark(int? assignmentId = default(int?), int? studentId = default(int?), int? mark = default(int?), bool? dutyMark = default(bool?))
        {
            this.AssignmentId = assignmentId;
            this.StudentId = studentId;
            this._Mark = mark;
            this.DutyMark = dutyMark;
        }
        
        /// <summary>
        /// Gets or Sets AssignmentId
        /// </summary>
        [DataMember(Name="assignmentId", EmitDefaultValue=false)]
        public int? AssignmentId { get; set; }

        /// <summary>
        /// Gets or Sets StudentId
        /// </summary>
        [DataMember(Name="studentId", EmitDefaultValue=false)]
        public int? StudentId { get; set; }

        /// <summary>
        /// Gets or Sets _Mark
        /// </summary>
        [DataMember(Name="mark", EmitDefaultValue=false)]
        public int? _Mark { get; set; }

        /// <summary>
        /// Gets or Sets DutyMark
        /// </summary>
        [DataMember(Name="dutyMark", EmitDefaultValue=false)]
        public bool? DutyMark { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Mark {\n");
            sb.Append("  AssignmentId: ").Append(AssignmentId).Append("\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("  _Mark: ").Append(_Mark).Append("\n");
            sb.Append("  DutyMark: ").Append(DutyMark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Mark);
        }

        /// <summary>
        /// Returns true if Mark instances are equal
        /// </summary>
        /// <param name="input">Instance of Mark to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Mark input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssignmentId == input.AssignmentId ||
                    (this.AssignmentId != null &&
                    this.AssignmentId.Equals(input.AssignmentId))
                ) && 
                (
                    this.StudentId == input.StudentId ||
                    (this.StudentId != null &&
                    this.StudentId.Equals(input.StudentId))
                ) && 
                (
                    this._Mark == input._Mark ||
                    (this._Mark != null &&
                    this._Mark.Equals(input._Mark))
                ) && 
                (
                    this.DutyMark == input.DutyMark ||
                    (this.DutyMark != null &&
                    this.DutyMark.Equals(input.DutyMark))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssignmentId != null)
                    hashCode = hashCode * 59 + this.AssignmentId.GetHashCode();
                if (this.StudentId != null)
                    hashCode = hashCode * 59 + this.StudentId.GetHashCode();
                if (this._Mark != null)
                    hashCode = hashCode * 59 + this._Mark.GetHashCode();
                if (this.DutyMark != null)
                    hashCode = hashCode * 59 + this.DutyMark.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
