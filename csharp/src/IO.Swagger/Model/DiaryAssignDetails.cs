/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 4.30.43656
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DiaryAssignDetails
    /// </summary>
    [DataContract]
        public partial class DiaryAssignDetails :  IEquatable<DiaryAssignDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiaryAssignDetails" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="assignmentName">assignmentName.</param>
        /// <param name="activityName">activityName.</param>
        /// <param name="problemName">problemName.</param>
        /// <param name="subjectGroup">subjectGroup.</param>
        /// <param name="teacher">teacher.</param>
        /// <param name="productId">productId.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="weight">weight.</param>
        /// <param name="date">date.</param>
        /// <param name="description">description.</param>
        /// <param name="attachments">attachments.</param>
        /// <param name="contentElements">contentElements.</param>
        /// <param name="codeContentElements">codeContentElements.</param>
        public DiaryAssignDetails(int? id = default(int?), string assignmentName = default(string), string activityName = default(string), string problemName = default(string), DiaryAssignDetailsSubjectGroup subjectGroup = default(DiaryAssignDetailsSubjectGroup), DiaryAssignDetailsTeacher teacher = default(DiaryAssignDetailsTeacher), int? productId = default(int?), bool? isDeleted = default(bool?), int? weight = default(int?), DateTime? date = default(DateTime?), string description = default(string), List<DiaryAssignDetailsAttachments> attachments = default(List<DiaryAssignDetailsAttachments>), List<Object> contentElements = default(List<Object>), List<Object> codeContentElements = default(List<Object>))
        {
            this.Id = id;
            this.AssignmentName = assignmentName;
            this.ActivityName = activityName;
            this.ProblemName = problemName;
            this.SubjectGroup = subjectGroup;
            this.Teacher = teacher;
            this.ProductId = productId;
            this.IsDeleted = isDeleted;
            this.Weight = weight;
            this.Date = date;
            this.Description = description;
            this.Attachments = attachments;
            this.ContentElements = contentElements;
            this.CodeContentElements = codeContentElements;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentName
        /// </summary>
        [DataMember(Name="assignmentName", EmitDefaultValue=false)]
        public string AssignmentName { get; set; }

        /// <summary>
        /// Gets or Sets ActivityName
        /// </summary>
        [DataMember(Name="activityName", EmitDefaultValue=false)]
        public string ActivityName { get; set; }

        /// <summary>
        /// Gets or Sets ProblemName
        /// </summary>
        [DataMember(Name="problemName", EmitDefaultValue=false)]
        public string ProblemName { get; set; }

        /// <summary>
        /// Gets or Sets SubjectGroup
        /// </summary>
        [DataMember(Name="subjectGroup", EmitDefaultValue=false)]
        public DiaryAssignDetailsSubjectGroup SubjectGroup { get; set; }

        /// <summary>
        /// Gets or Sets Teacher
        /// </summary>
        [DataMember(Name="teacher", EmitDefaultValue=false)]
        public DiaryAssignDetailsTeacher Teacher { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public int? ProductId { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public int? Weight { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<DiaryAssignDetailsAttachments> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets ContentElements
        /// </summary>
        [DataMember(Name="contentElements", EmitDefaultValue=false)]
        public List<Object> ContentElements { get; set; }

        /// <summary>
        /// Gets or Sets CodeContentElements
        /// </summary>
        [DataMember(Name="codeContentElements", EmitDefaultValue=false)]
        public List<Object> CodeContentElements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiaryAssignDetails {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssignmentName: ").Append(AssignmentName).Append("\n");
            sb.Append("  ActivityName: ").Append(ActivityName).Append("\n");
            sb.Append("  ProblemName: ").Append(ProblemName).Append("\n");
            sb.Append("  SubjectGroup: ").Append(SubjectGroup).Append("\n");
            sb.Append("  Teacher: ").Append(Teacher).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  ContentElements: ").Append(ContentElements).Append("\n");
            sb.Append("  CodeContentElements: ").Append(CodeContentElements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiaryAssignDetails);
        }

        /// <summary>
        /// Returns true if DiaryAssignDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DiaryAssignDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiaryAssignDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AssignmentName == input.AssignmentName ||
                    (this.AssignmentName != null &&
                    this.AssignmentName.Equals(input.AssignmentName))
                ) && 
                (
                    this.ActivityName == input.ActivityName ||
                    (this.ActivityName != null &&
                    this.ActivityName.Equals(input.ActivityName))
                ) && 
                (
                    this.ProblemName == input.ProblemName ||
                    (this.ProblemName != null &&
                    this.ProblemName.Equals(input.ProblemName))
                ) && 
                (
                    this.SubjectGroup == input.SubjectGroup ||
                    (this.SubjectGroup != null &&
                    this.SubjectGroup.Equals(input.SubjectGroup))
                ) && 
                (
                    this.Teacher == input.Teacher ||
                    (this.Teacher != null &&
                    this.Teacher.Equals(input.Teacher))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.ContentElements == input.ContentElements ||
                    this.ContentElements != null &&
                    input.ContentElements != null &&
                    this.ContentElements.SequenceEqual(input.ContentElements)
                ) && 
                (
                    this.CodeContentElements == input.CodeContentElements ||
                    this.CodeContentElements != null &&
                    input.CodeContentElements != null &&
                    this.CodeContentElements.SequenceEqual(input.CodeContentElements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AssignmentName != null)
                    hashCode = hashCode * 59 + this.AssignmentName.GetHashCode();
                if (this.ActivityName != null)
                    hashCode = hashCode * 59 + this.ActivityName.GetHashCode();
                if (this.ProblemName != null)
                    hashCode = hashCode * 59 + this.ProblemName.GetHashCode();
                if (this.SubjectGroup != null)
                    hashCode = hashCode * 59 + this.SubjectGroup.GetHashCode();
                if (this.Teacher != null)
                    hashCode = hashCode * 59 + this.Teacher.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.ContentElements != null)
                    hashCode = hashCode * 59 + this.ContentElements.GetHashCode();
                if (this.CodeContentElements != null)
                    hashCode = hashCode * 59 + this.CodeContentElements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
