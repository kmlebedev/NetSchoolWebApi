/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PrepareEmLoginForm
    /// </summary>
    [DataContract]
        public partial class PrepareEmLoginForm :  IEquatable<PrepareEmLoginForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareEmLoginForm" /> class.
        /// </summary>
        /// <param name="countries">countries.</param>
        /// <param name="states">states.</param>
        /// <param name="hlevels">hlevels.</param>
        /// <param name="ems">ems.</param>
        /// <param name="emCid">emCid.</param>
        /// <param name="emSid">emSid.</param>
        /// <param name="hlevel">hlevel.</param>
        /// <param name="emId">emId.</param>
        public PrepareEmLoginForm(List<PrepareEmLoginFormCountries> countries = default(List<PrepareEmLoginFormCountries>), List<PrepareEmLoginFormCountries> states = default(List<PrepareEmLoginFormCountries>), List<PrepareEmLoginFormCountries> hlevels = default(List<PrepareEmLoginFormCountries>), List<PrepareEmLoginFormCountries> ems = default(List<PrepareEmLoginFormCountries>), int? emCid = default(int?), int? emSid = default(int?), int? hlevel = default(int?), int? emId = default(int?))
        {
            this.Countries = countries;
            this.States = states;
            this.Hlevels = hlevels;
            this.Ems = ems;
            this.EmCid = emCid;
            this.EmSid = emSid;
            this.Hlevel = hlevel;
            this.EmId = emId;
        }
        
        /// <summary>
        /// Gets or Sets Countries
        /// </summary>
        [DataMember(Name="countries", EmitDefaultValue=false)]
        public List<PrepareEmLoginFormCountries> Countries { get; set; }

        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [DataMember(Name="states", EmitDefaultValue=false)]
        public List<PrepareEmLoginFormCountries> States { get; set; }

        /// <summary>
        /// Gets or Sets Hlevels
        /// </summary>
        [DataMember(Name="hlevels", EmitDefaultValue=false)]
        public List<PrepareEmLoginFormCountries> Hlevels { get; set; }

        /// <summary>
        /// Gets or Sets Ems
        /// </summary>
        [DataMember(Name="ems", EmitDefaultValue=false)]
        public List<PrepareEmLoginFormCountries> Ems { get; set; }

        /// <summary>
        /// Gets or Sets EmCid
        /// </summary>
        [DataMember(Name="em_cid", EmitDefaultValue=false)]
        public int? EmCid { get; set; }

        /// <summary>
        /// Gets or Sets EmSid
        /// </summary>
        [DataMember(Name="em_sid", EmitDefaultValue=false)]
        public int? EmSid { get; set; }

        /// <summary>
        /// Gets or Sets Hlevel
        /// </summary>
        [DataMember(Name="hlevel", EmitDefaultValue=false)]
        public int? Hlevel { get; set; }

        /// <summary>
        /// Gets or Sets EmId
        /// </summary>
        [DataMember(Name="emId", EmitDefaultValue=false)]
        public int? EmId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrepareEmLoginForm {\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  Hlevels: ").Append(Hlevels).Append("\n");
            sb.Append("  Ems: ").Append(Ems).Append("\n");
            sb.Append("  EmCid: ").Append(EmCid).Append("\n");
            sb.Append("  EmSid: ").Append(EmSid).Append("\n");
            sb.Append("  Hlevel: ").Append(Hlevel).Append("\n");
            sb.Append("  EmId: ").Append(EmId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepareEmLoginForm);
        }

        /// <summary>
        /// Returns true if PrepareEmLoginForm instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepareEmLoginForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepareEmLoginForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Countries == input.Countries ||
                    this.Countries != null &&
                    input.Countries != null &&
                    this.Countries.SequenceEqual(input.Countries)
                ) && 
                (
                    this.States == input.States ||
                    this.States != null &&
                    input.States != null &&
                    this.States.SequenceEqual(input.States)
                ) && 
                (
                    this.Hlevels == input.Hlevels ||
                    this.Hlevels != null &&
                    input.Hlevels != null &&
                    this.Hlevels.SequenceEqual(input.Hlevels)
                ) && 
                (
                    this.Ems == input.Ems ||
                    this.Ems != null &&
                    input.Ems != null &&
                    this.Ems.SequenceEqual(input.Ems)
                ) && 
                (
                    this.EmCid == input.EmCid ||
                    (this.EmCid != null &&
                    this.EmCid.Equals(input.EmCid))
                ) && 
                (
                    this.EmSid == input.EmSid ||
                    (this.EmSid != null &&
                    this.EmSid.Equals(input.EmSid))
                ) && 
                (
                    this.Hlevel == input.Hlevel ||
                    (this.Hlevel != null &&
                    this.Hlevel.Equals(input.Hlevel))
                ) && 
                (
                    this.EmId == input.EmId ||
                    (this.EmId != null &&
                    this.EmId.Equals(input.EmId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Countries != null)
                    hashCode = hashCode * 59 + this.Countries.GetHashCode();
                if (this.States != null)
                    hashCode = hashCode * 59 + this.States.GetHashCode();
                if (this.Hlevels != null)
                    hashCode = hashCode * 59 + this.Hlevels.GetHashCode();
                if (this.Ems != null)
                    hashCode = hashCode * 59 + this.Ems.GetHashCode();
                if (this.EmCid != null)
                    hashCode = hashCode * 59 + this.EmCid.GetHashCode();
                if (this.EmSid != null)
                    hashCode = hashCode * 59 + this.EmSid.GetHashCode();
                if (this.Hlevel != null)
                    hashCode = hashCode * 59 + this.Hlevel.GetHashCode();
                if (this.EmId != null)
                    hashCode = hashCode * 59 + this.EmId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
