/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LoginBody
    /// </summary>
    [DataContract]
        public partial class LoginBody :  IEquatable<LoginBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginBody" /> class.
        /// </summary>
        /// <param name="loginType">loginType.</param>
        /// <param name="cid">cid.</param>
        /// <param name="sid">sid.</param>
        /// <param name="pid">pid.</param>
        /// <param name="cn">cn.</param>
        /// <param name="sft">sft.</param>
        /// <param name="scid">scid.</param>
        /// <param name="uN">uN.</param>
        /// <param name="pW">pW.</param>
        /// <param name="lt">lt.</param>
        /// <param name="pw2">pw2.</param>
        /// <param name="ver">ver.</param>
        public LoginBody(int? loginType = default(int?), int? cid = default(int?), int? sid = default(int?), int? pid = default(int?), int? cn = default(int?), int? sft = default(int?), int? scid = default(int?), string uN = default(string), string pW = default(string), int? lt = default(int?), string pw2 = default(string), int? ver = default(int?))
        {
            this.LoginType = loginType;
            this.Cid = cid;
            this.Sid = sid;
            this.Pid = pid;
            this.Cn = cn;
            this.Sft = sft;
            this.Scid = scid;
            this.UN = uN;
            this.PW = pW;
            this.Lt = lt;
            this.Pw2 = pw2;
            this.Ver = ver;
        }
        
        /// <summary>
        /// Gets or Sets LoginType
        /// </summary>
        [DataMember(Name="LoginType", EmitDefaultValue=false)]
        public int? LoginType { get; set; }

        /// <summary>
        /// Gets or Sets Cid
        /// </summary>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public int? Cid { get; set; }

        /// <summary>
        /// Gets or Sets Sid
        /// </summary>
        [DataMember(Name="sid", EmitDefaultValue=false)]
        public int? Sid { get; set; }

        /// <summary>
        /// Gets or Sets Pid
        /// </summary>
        [DataMember(Name="pid", EmitDefaultValue=false)]
        public int? Pid { get; set; }

        /// <summary>
        /// Gets or Sets Cn
        /// </summary>
        [DataMember(Name="cn", EmitDefaultValue=false)]
        public int? Cn { get; set; }

        /// <summary>
        /// Gets or Sets Sft
        /// </summary>
        [DataMember(Name="sft", EmitDefaultValue=false)]
        public int? Sft { get; set; }

        /// <summary>
        /// Gets or Sets Scid
        /// </summary>
        [DataMember(Name="scid", EmitDefaultValue=false)]
        public int? Scid { get; set; }

        /// <summary>
        /// Gets or Sets UN
        /// </summary>
        [DataMember(Name="UN", EmitDefaultValue=false)]
        public string UN { get; set; }

        /// <summary>
        /// Gets or Sets PW
        /// </summary>
        [DataMember(Name="PW", EmitDefaultValue=false)]
        public string PW { get; set; }

        /// <summary>
        /// Gets or Sets Lt
        /// </summary>
        [DataMember(Name="lt", EmitDefaultValue=false)]
        public int? Lt { get; set; }

        /// <summary>
        /// Gets or Sets Pw2
        /// </summary>
        [DataMember(Name="pw2", EmitDefaultValue=false)]
        public string Pw2 { get; set; }

        /// <summary>
        /// Gets or Sets Ver
        /// </summary>
        [DataMember(Name="ver", EmitDefaultValue=false)]
        public int? Ver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoginBody {\n");
            sb.Append("  LoginType: ").Append(LoginType).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  Cn: ").Append(Cn).Append("\n");
            sb.Append("  Sft: ").Append(Sft).Append("\n");
            sb.Append("  Scid: ").Append(Scid).Append("\n");
            sb.Append("  UN: ").Append(UN).Append("\n");
            sb.Append("  PW: ").Append(PW).Append("\n");
            sb.Append("  Lt: ").Append(Lt).Append("\n");
            sb.Append("  Pw2: ").Append(Pw2).Append("\n");
            sb.Append("  Ver: ").Append(Ver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoginBody);
        }

        /// <summary>
        /// Returns true if LoginBody instances are equal
        /// </summary>
        /// <param name="input">Instance of LoginBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoginType == input.LoginType ||
                    (this.LoginType != null &&
                    this.LoginType.Equals(input.LoginType))
                ) && 
                (
                    this.Cid == input.Cid ||
                    (this.Cid != null &&
                    this.Cid.Equals(input.Cid))
                ) && 
                (
                    this.Sid == input.Sid ||
                    (this.Sid != null &&
                    this.Sid.Equals(input.Sid))
                ) && 
                (
                    this.Pid == input.Pid ||
                    (this.Pid != null &&
                    this.Pid.Equals(input.Pid))
                ) && 
                (
                    this.Cn == input.Cn ||
                    (this.Cn != null &&
                    this.Cn.Equals(input.Cn))
                ) && 
                (
                    this.Sft == input.Sft ||
                    (this.Sft != null &&
                    this.Sft.Equals(input.Sft))
                ) && 
                (
                    this.Scid == input.Scid ||
                    (this.Scid != null &&
                    this.Scid.Equals(input.Scid))
                ) && 
                (
                    this.UN == input.UN ||
                    (this.UN != null &&
                    this.UN.Equals(input.UN))
                ) && 
                (
                    this.PW == input.PW ||
                    (this.PW != null &&
                    this.PW.Equals(input.PW))
                ) && 
                (
                    this.Lt == input.Lt ||
                    (this.Lt != null &&
                    this.Lt.Equals(input.Lt))
                ) && 
                (
                    this.Pw2 == input.Pw2 ||
                    (this.Pw2 != null &&
                    this.Pw2.Equals(input.Pw2))
                ) && 
                (
                    this.Ver == input.Ver ||
                    (this.Ver != null &&
                    this.Ver.Equals(input.Ver))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoginType != null)
                    hashCode = hashCode * 59 + this.LoginType.GetHashCode();
                if (this.Cid != null)
                    hashCode = hashCode * 59 + this.Cid.GetHashCode();
                if (this.Sid != null)
                    hashCode = hashCode * 59 + this.Sid.GetHashCode();
                if (this.Pid != null)
                    hashCode = hashCode * 59 + this.Pid.GetHashCode();
                if (this.Cn != null)
                    hashCode = hashCode * 59 + this.Cn.GetHashCode();
                if (this.Sft != null)
                    hashCode = hashCode * 59 + this.Sft.GetHashCode();
                if (this.Scid != null)
                    hashCode = hashCode * 59 + this.Scid.GetHashCode();
                if (this.UN != null)
                    hashCode = hashCode * 59 + this.UN.GetHashCode();
                if (this.PW != null)
                    hashCode = hashCode * 59 + this.PW.GetHashCode();
                if (this.Lt != null)
                    hashCode = hashCode * 59 + this.Lt.GetHashCode();
                if (this.Pw2 != null)
                    hashCode = hashCode * 59 + this.Pw2.GetHashCode();
                if (this.Ver != null)
                    hashCode = hashCode * 59 + this.Ver.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
