/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MySettingsUserSettings
    /// </summary>
    [DataContract]
        public partial class MySettingsUserSettings :  IEquatable<MySettingsUserSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MySettingsUserSettings" /> class.
        /// </summary>
        /// <param name="showMobilePhone">showMobilePhone.</param>
        /// <param name="defaultDesktop">defaultDesktop.</param>
        /// <param name="language">language.</param>
        /// <param name="favoriteReports">favoriteReports.</param>
        /// <param name="passwordExpired">passwordExpired.</param>
        /// <param name="recoveryAnswer">recoveryAnswer.</param>
        /// <param name="recoveryQuestion">recoveryQuestion.</param>
        /// <param name="theme">theme.</param>
        /// <param name="userId">userId.</param>
        /// <param name="showNetSchoolApp">showNetSchoolApp.</param>
        public MySettingsUserSettings(bool? showMobilePhone = default(bool?), int? defaultDesktop = default(int?), string language = default(string), List<string> favoriteReports = default(List<string>), int? passwordExpired = default(int?), string recoveryAnswer = default(string), string recoveryQuestion = default(string), int? theme = default(int?), int? userId = default(int?), bool? showNetSchoolApp = default(bool?))
        {
            this.ShowMobilePhone = showMobilePhone;
            this.DefaultDesktop = defaultDesktop;
            this.Language = language;
            this.FavoriteReports = favoriteReports;
            this.PasswordExpired = passwordExpired;
            this.RecoveryAnswer = recoveryAnswer;
            this.RecoveryQuestion = recoveryQuestion;
            this.Theme = theme;
            this.UserId = userId;
            this.ShowNetSchoolApp = showNetSchoolApp;
        }
        
        /// <summary>
        /// Gets or Sets ShowMobilePhone
        /// </summary>
        [DataMember(Name="showMobilePhone", EmitDefaultValue=false)]
        public bool? ShowMobilePhone { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDesktop
        /// </summary>
        [DataMember(Name="defaultDesktop", EmitDefaultValue=false)]
        public int? DefaultDesktop { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets FavoriteReports
        /// </summary>
        [DataMember(Name="favoriteReports", EmitDefaultValue=false)]
        public List<string> FavoriteReports { get; set; }

        /// <summary>
        /// Gets or Sets PasswordExpired
        /// </summary>
        [DataMember(Name="passwordExpired", EmitDefaultValue=false)]
        public int? PasswordExpired { get; set; }

        /// <summary>
        /// Gets or Sets RecoveryAnswer
        /// </summary>
        [DataMember(Name="recoveryAnswer", EmitDefaultValue=false)]
        public string RecoveryAnswer { get; set; }

        /// <summary>
        /// Gets or Sets RecoveryQuestion
        /// </summary>
        [DataMember(Name="recoveryQuestion", EmitDefaultValue=false)]
        public string RecoveryQuestion { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [DataMember(Name="theme", EmitDefaultValue=false)]
        public int? Theme { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets ShowNetSchoolApp
        /// </summary>
        [DataMember(Name="showNetSchoolApp", EmitDefaultValue=false)]
        public bool? ShowNetSchoolApp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MySettingsUserSettings {\n");
            sb.Append("  ShowMobilePhone: ").Append(ShowMobilePhone).Append("\n");
            sb.Append("  DefaultDesktop: ").Append(DefaultDesktop).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  FavoriteReports: ").Append(FavoriteReports).Append("\n");
            sb.Append("  PasswordExpired: ").Append(PasswordExpired).Append("\n");
            sb.Append("  RecoveryAnswer: ").Append(RecoveryAnswer).Append("\n");
            sb.Append("  RecoveryQuestion: ").Append(RecoveryQuestion).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ShowNetSchoolApp: ").Append(ShowNetSchoolApp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MySettingsUserSettings);
        }

        /// <summary>
        /// Returns true if MySettingsUserSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of MySettingsUserSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MySettingsUserSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShowMobilePhone == input.ShowMobilePhone ||
                    (this.ShowMobilePhone != null &&
                    this.ShowMobilePhone.Equals(input.ShowMobilePhone))
                ) && 
                (
                    this.DefaultDesktop == input.DefaultDesktop ||
                    (this.DefaultDesktop != null &&
                    this.DefaultDesktop.Equals(input.DefaultDesktop))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.FavoriteReports == input.FavoriteReports ||
                    this.FavoriteReports != null &&
                    input.FavoriteReports != null &&
                    this.FavoriteReports.SequenceEqual(input.FavoriteReports)
                ) && 
                (
                    this.PasswordExpired == input.PasswordExpired ||
                    (this.PasswordExpired != null &&
                    this.PasswordExpired.Equals(input.PasswordExpired))
                ) && 
                (
                    this.RecoveryAnswer == input.RecoveryAnswer ||
                    (this.RecoveryAnswer != null &&
                    this.RecoveryAnswer.Equals(input.RecoveryAnswer))
                ) && 
                (
                    this.RecoveryQuestion == input.RecoveryQuestion ||
                    (this.RecoveryQuestion != null &&
                    this.RecoveryQuestion.Equals(input.RecoveryQuestion))
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ShowNetSchoolApp == input.ShowNetSchoolApp ||
                    (this.ShowNetSchoolApp != null &&
                    this.ShowNetSchoolApp.Equals(input.ShowNetSchoolApp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShowMobilePhone != null)
                    hashCode = hashCode * 59 + this.ShowMobilePhone.GetHashCode();
                if (this.DefaultDesktop != null)
                    hashCode = hashCode * 59 + this.DefaultDesktop.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.FavoriteReports != null)
                    hashCode = hashCode * 59 + this.FavoriteReports.GetHashCode();
                if (this.PasswordExpired != null)
                    hashCode = hashCode * 59 + this.PasswordExpired.GetHashCode();
                if (this.RecoveryAnswer != null)
                    hashCode = hashCode * 59 + this.RecoveryAnswer.GetHashCode();
                if (this.RecoveryQuestion != null)
                    hashCode = hashCode * 59 + this.RecoveryQuestion.GetHashCode();
                if (this.Theme != null)
                    hashCode = hashCode * 59 + this.Theme.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.ShowNetSchoolApp != null)
                    hashCode = hashCode * 59 + this.ShowNetSchoolApp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
