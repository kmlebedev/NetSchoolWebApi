/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 4.30.43656
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StudentDiaryInitStudents
    /// </summary>
    [DataContract]
        public partial class StudentDiaryInitStudents :  IEquatable<StudentDiaryInitStudents>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentDiaryInitStudents" /> class.
        /// </summary>
        /// <param name="studentId">studentId.</param>
        /// <param name="nickName">nickName.</param>
        /// <param name="className">className.</param>
        /// <param name="classId">classId.</param>
        /// <param name="iupGrade">iupGrade.</param>
        public StudentDiaryInitStudents(int? studentId = default(int?), string nickName = default(string), Object className = default(Object), int? classId = default(int?), int? iupGrade = default(int?))
        {
            this.StudentId = studentId;
            this.NickName = nickName;
            this.ClassName = className;
            this.ClassId = classId;
            this.IupGrade = iupGrade;
        }
        
        /// <summary>
        /// Gets or Sets StudentId
        /// </summary>
        [DataMember(Name="studentId", EmitDefaultValue=false)]
        public int? StudentId { get; set; }

        /// <summary>
        /// Gets or Sets NickName
        /// </summary>
        [DataMember(Name="nickName", EmitDefaultValue=false)]
        public string NickName { get; set; }

        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [DataMember(Name="className", EmitDefaultValue=false)]
        public Object ClassName { get; set; }

        /// <summary>
        /// Gets or Sets ClassId
        /// </summary>
        [DataMember(Name="classId", EmitDefaultValue=false)]
        public int? ClassId { get; set; }

        /// <summary>
        /// Gets or Sets IupGrade
        /// </summary>
        [DataMember(Name="iupGrade", EmitDefaultValue=false)]
        public int? IupGrade { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentDiaryInitStudents {\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  ClassId: ").Append(ClassId).Append("\n");
            sb.Append("  IupGrade: ").Append(IupGrade).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StudentDiaryInitStudents);
        }

        /// <summary>
        /// Returns true if StudentDiaryInitStudents instances are equal
        /// </summary>
        /// <param name="input">Instance of StudentDiaryInitStudents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentDiaryInitStudents input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StudentId == input.StudentId ||
                    (this.StudentId != null &&
                    this.StudentId.Equals(input.StudentId))
                ) && 
                (
                    this.NickName == input.NickName ||
                    (this.NickName != null &&
                    this.NickName.Equals(input.NickName))
                ) && 
                (
                    this.ClassName == input.ClassName ||
                    (this.ClassName != null &&
                    this.ClassName.Equals(input.ClassName))
                ) && 
                (
                    this.ClassId == input.ClassId ||
                    (this.ClassId != null &&
                    this.ClassId.Equals(input.ClassId))
                ) && 
                (
                    this.IupGrade == input.IupGrade ||
                    (this.IupGrade != null &&
                    this.IupGrade.Equals(input.IupGrade))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StudentId != null)
                    hashCode = hashCode * 59 + this.StudentId.GetHashCode();
                if (this.NickName != null)
                    hashCode = hashCode * 59 + this.NickName.GetHashCode();
                if (this.ClassName != null)
                    hashCode = hashCode * 59 + this.ClassName.GetHashCode();
                if (this.ClassId != null)
                    hashCode = hashCode * 59 + this.ClassId.GetHashCode();
                if (this.IupGrade != null)
                    hashCode = hashCode * 59 + this.IupGrade.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
