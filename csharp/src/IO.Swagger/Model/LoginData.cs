/* 
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LoginData
    /// </summary>
    [DataContract]
        public partial class LoginData :  IEquatable<LoginData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginData" /> class.
        /// </summary>
        /// <param name="productName">productName.</param>
        /// <param name="version">version.</param>
        /// <param name="schoolLogin">schoolLogin.</param>
        /// <param name="emLogin">emLogin.</param>
        /// <param name="esiaLogin">esiaLogin.</param>
        /// <param name="esiaLoginPage">esiaLoginPage.</param>
        /// <param name="esiaMainAuth">esiaMainAuth.</param>
        /// <param name="esiaButton">esiaButton.</param>
        /// <param name="signatureLogin">signatureLogin.</param>
        /// <param name="cacheVer">cacheVer.</param>
        /// <param name="windowsAuth">windowsAuth.</param>
        /// <param name="enableSms">enableSms.</param>
        /// <param name="esaLogin">esaLogin.</param>
        /// <param name="esaLoginPage">esaLoginPage.</param>
        public LoginData(string productName = default(string), string version = default(string), bool? schoolLogin = default(bool?), bool? emLogin = default(bool?), bool? esiaLogin = default(bool?), string esiaLoginPage = default(string), bool? esiaMainAuth = default(bool?), bool? esiaButton = default(bool?), bool? signatureLogin = default(bool?), string cacheVer = default(string), bool? windowsAuth = default(bool?), bool? enableSms = default(bool?), bool? esaLogin = default(bool?), string esaLoginPage = default(string))
        {
            this.ProductName = productName;
            this.Version = version;
            this.SchoolLogin = schoolLogin;
            this.EmLogin = emLogin;
            this.EsiaLogin = esiaLogin;
            this.EsiaLoginPage = esiaLoginPage;
            this.EsiaMainAuth = esiaMainAuth;
            this.EsiaButton = esiaButton;
            this.SignatureLogin = signatureLogin;
            this.CacheVer = cacheVer;
            this.WindowsAuth = windowsAuth;
            this.EnableSms = enableSms;
            this.EsaLogin = esaLogin;
            this.EsaLoginPage = esaLoginPage;
        }
        
        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets SchoolLogin
        /// </summary>
        [DataMember(Name="schoolLogin", EmitDefaultValue=false)]
        public bool? SchoolLogin { get; set; }

        /// <summary>
        /// Gets or Sets EmLogin
        /// </summary>
        [DataMember(Name="emLogin", EmitDefaultValue=false)]
        public bool? EmLogin { get; set; }

        /// <summary>
        /// Gets or Sets EsiaLogin
        /// </summary>
        [DataMember(Name="esiaLogin", EmitDefaultValue=false)]
        public bool? EsiaLogin { get; set; }

        /// <summary>
        /// Gets or Sets EsiaLoginPage
        /// </summary>
        [DataMember(Name="esiaLoginPage", EmitDefaultValue=false)]
        public string EsiaLoginPage { get; set; }

        /// <summary>
        /// Gets or Sets EsiaMainAuth
        /// </summary>
        [DataMember(Name="esiaMainAuth", EmitDefaultValue=false)]
        public bool? EsiaMainAuth { get; set; }

        /// <summary>
        /// Gets or Sets EsiaButton
        /// </summary>
        [DataMember(Name="esiaButton", EmitDefaultValue=false)]
        public bool? EsiaButton { get; set; }

        /// <summary>
        /// Gets or Sets SignatureLogin
        /// </summary>
        [DataMember(Name="signatureLogin", EmitDefaultValue=false)]
        public bool? SignatureLogin { get; set; }

        /// <summary>
        /// Gets or Sets CacheVer
        /// </summary>
        [DataMember(Name="cacheVer", EmitDefaultValue=false)]
        public string CacheVer { get; set; }

        /// <summary>
        /// Gets or Sets WindowsAuth
        /// </summary>
        [DataMember(Name="windowsAuth", EmitDefaultValue=false)]
        public bool? WindowsAuth { get; set; }

        /// <summary>
        /// Gets or Sets EnableSms
        /// </summary>
        [DataMember(Name="enableSms", EmitDefaultValue=false)]
        public bool? EnableSms { get; set; }

        /// <summary>
        /// Gets or Sets EsaLogin
        /// </summary>
        [DataMember(Name="esaLogin", EmitDefaultValue=false)]
        public bool? EsaLogin { get; set; }

        /// <summary>
        /// Gets or Sets EsaLoginPage
        /// </summary>
        [DataMember(Name="esaLoginPage", EmitDefaultValue=false)]
        public string EsaLoginPage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoginData {\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  SchoolLogin: ").Append(SchoolLogin).Append("\n");
            sb.Append("  EmLogin: ").Append(EmLogin).Append("\n");
            sb.Append("  EsiaLogin: ").Append(EsiaLogin).Append("\n");
            sb.Append("  EsiaLoginPage: ").Append(EsiaLoginPage).Append("\n");
            sb.Append("  EsiaMainAuth: ").Append(EsiaMainAuth).Append("\n");
            sb.Append("  EsiaButton: ").Append(EsiaButton).Append("\n");
            sb.Append("  SignatureLogin: ").Append(SignatureLogin).Append("\n");
            sb.Append("  CacheVer: ").Append(CacheVer).Append("\n");
            sb.Append("  WindowsAuth: ").Append(WindowsAuth).Append("\n");
            sb.Append("  EnableSms: ").Append(EnableSms).Append("\n");
            sb.Append("  EsaLogin: ").Append(EsaLogin).Append("\n");
            sb.Append("  EsaLoginPage: ").Append(EsaLoginPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoginData);
        }

        /// <summary>
        /// Returns true if LoginData instances are equal
        /// </summary>
        /// <param name="input">Instance of LoginData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.SchoolLogin == input.SchoolLogin ||
                    (this.SchoolLogin != null &&
                    this.SchoolLogin.Equals(input.SchoolLogin))
                ) && 
                (
                    this.EmLogin == input.EmLogin ||
                    (this.EmLogin != null &&
                    this.EmLogin.Equals(input.EmLogin))
                ) && 
                (
                    this.EsiaLogin == input.EsiaLogin ||
                    (this.EsiaLogin != null &&
                    this.EsiaLogin.Equals(input.EsiaLogin))
                ) && 
                (
                    this.EsiaLoginPage == input.EsiaLoginPage ||
                    (this.EsiaLoginPage != null &&
                    this.EsiaLoginPage.Equals(input.EsiaLoginPage))
                ) && 
                (
                    this.EsiaMainAuth == input.EsiaMainAuth ||
                    (this.EsiaMainAuth != null &&
                    this.EsiaMainAuth.Equals(input.EsiaMainAuth))
                ) && 
                (
                    this.EsiaButton == input.EsiaButton ||
                    (this.EsiaButton != null &&
                    this.EsiaButton.Equals(input.EsiaButton))
                ) && 
                (
                    this.SignatureLogin == input.SignatureLogin ||
                    (this.SignatureLogin != null &&
                    this.SignatureLogin.Equals(input.SignatureLogin))
                ) && 
                (
                    this.CacheVer == input.CacheVer ||
                    (this.CacheVer != null &&
                    this.CacheVer.Equals(input.CacheVer))
                ) && 
                (
                    this.WindowsAuth == input.WindowsAuth ||
                    (this.WindowsAuth != null &&
                    this.WindowsAuth.Equals(input.WindowsAuth))
                ) && 
                (
                    this.EnableSms == input.EnableSms ||
                    (this.EnableSms != null &&
                    this.EnableSms.Equals(input.EnableSms))
                ) && 
                (
                    this.EsaLogin == input.EsaLogin ||
                    (this.EsaLogin != null &&
                    this.EsaLogin.Equals(input.EsaLogin))
                ) && 
                (
                    this.EsaLoginPage == input.EsaLoginPage ||
                    (this.EsaLoginPage != null &&
                    this.EsaLoginPage.Equals(input.EsaLoginPage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.SchoolLogin != null)
                    hashCode = hashCode * 59 + this.SchoolLogin.GetHashCode();
                if (this.EmLogin != null)
                    hashCode = hashCode * 59 + this.EmLogin.GetHashCode();
                if (this.EsiaLogin != null)
                    hashCode = hashCode * 59 + this.EsiaLogin.GetHashCode();
                if (this.EsiaLoginPage != null)
                    hashCode = hashCode * 59 + this.EsiaLoginPage.GetHashCode();
                if (this.EsiaMainAuth != null)
                    hashCode = hashCode * 59 + this.EsiaMainAuth.GetHashCode();
                if (this.EsiaButton != null)
                    hashCode = hashCode * 59 + this.EsiaButton.GetHashCode();
                if (this.SignatureLogin != null)
                    hashCode = hashCode * 59 + this.SignatureLogin.GetHashCode();
                if (this.CacheVer != null)
                    hashCode = hashCode * 59 + this.CacheVer.GetHashCode();
                if (this.WindowsAuth != null)
                    hashCode = hashCode * 59 + this.WindowsAuth.GetHashCode();
                if (this.EnableSms != null)
                    hashCode = hashCode * 59 + this.EnableSms.GetHashCode();
                if (this.EsaLogin != null)
                    hashCode = hashCode * 59 + this.EsaLogin.GetHashCode();
                if (this.EsaLoginPage != null)
                    hashCode = hashCode * 59 + this.EsaLoginPage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
