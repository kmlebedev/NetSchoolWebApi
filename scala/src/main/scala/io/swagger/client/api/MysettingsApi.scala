/**
 * NetSchool
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.mySettings
import io.swagger.client.model.mySettingsYears
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class MysettingsApi(
  val defBasePath: String = "https://virtserver.swaggerhub.com/LEBEDEVKM/NetSchool/5.10.63221",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new MysettingsApiAsyncHelper(client, config)

  /**
   * 
   * returns my settings
   *
   * @param at an authorization header 
   * @return mySettings
   */
  def mysettings(at: String): Option[mySettings] = {
    val await = Try(Await.result(mysettingsAsync(at), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * returns my settings
   *
   * @param at an authorization header 
   * @return Future(mySettings)
   */
  def mysettingsAsync(at: String): Future[mySettings] = {
      helper.mysettings(at)
  }

  /**
   * 
   * returns all years
   *
   * @param at an authorization header 
   * @return mySettingsYears
   */
  def yearlist(at: String): Option[mySettingsYears] = {
    val await = Try(Await.result(yearlistAsync(at), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * returns all years
   *
   * @param at an authorization header 
   * @return Future(mySettingsYears)
   */
  def yearlistAsync(at: String): Future[mySettingsYears] = {
      helper.yearlist(at)
  }

}

class MysettingsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def mysettings(at: String)(implicit reader: ClientResponseReader[mySettings]): Future[mySettings] = {
    // create path and map variables
    val path = (addFmt("/mysettings"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (at == null) throw new Exception("Missing required parameter 'at' when calling MysettingsApi->mysettings")

    headerParams += "at" -> at.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def yearlist(at: String)(implicit reader: ClientResponseReader[mySettingsYears]): Future[mySettingsYears] = {
    // create path and map variables
    val path = (addFmt("/mysettings/yearlist"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (at == null) throw new Exception("Missing required parameter 'at' when calling MysettingsApi->yearlist")

    headerParams += "at" -> at.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
