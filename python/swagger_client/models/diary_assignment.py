# coding: utf-8

"""
    NetSchool

    The API for the NetSchool irTech project  # noqa: E501

    OpenAPI spec version: 4.30.43656
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiaryAssignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mark': 'Mark',
        'attachments': 'list[Attachment]',
        'id': 'int',
        'type_id': 'int',
        'assignment_name': 'str',
        'weight': 'int',
        'due_date': 'date',
        'class_meeting_id': 'int',
        'exists_test_plan': 'bool'
    }

    attribute_map = {
        'mark': 'mark',
        'attachments': 'attachments',
        'id': 'id',
        'type_id': 'typeId',
        'assignment_name': 'assignmentName',
        'weight': 'weight',
        'due_date': 'dueDate',
        'class_meeting_id': 'classMeetingId',
        'exists_test_plan': 'existsTestPlan'
    }

    def __init__(self, mark=None, attachments=None, id=None, type_id=None, assignment_name=None, weight=None, due_date=None, class_meeting_id=None, exists_test_plan=None):  # noqa: E501
        """DiaryAssignment - a model defined in Swagger"""  # noqa: E501
        self._mark = None
        self._attachments = None
        self._id = None
        self._type_id = None
        self._assignment_name = None
        self._weight = None
        self._due_date = None
        self._class_meeting_id = None
        self._exists_test_plan = None
        self.discriminator = None
        if mark is not None:
            self.mark = mark
        if attachments is not None:
            self.attachments = attachments
        if id is not None:
            self.id = id
        if type_id is not None:
            self.type_id = type_id
        if assignment_name is not None:
            self.assignment_name = assignment_name
        if weight is not None:
            self.weight = weight
        if due_date is not None:
            self.due_date = due_date
        if class_meeting_id is not None:
            self.class_meeting_id = class_meeting_id
        if exists_test_plan is not None:
            self.exists_test_plan = exists_test_plan

    @property
    def mark(self):
        """Gets the mark of this DiaryAssignment.  # noqa: E501


        :return: The mark of this DiaryAssignment.  # noqa: E501
        :rtype: Mark
        """
        return self._mark

    @mark.setter
    def mark(self, mark):
        """Sets the mark of this DiaryAssignment.


        :param mark: The mark of this DiaryAssignment.  # noqa: E501
        :type: Mark
        """

        self._mark = mark

    @property
    def attachments(self):
        """Gets the attachments of this DiaryAssignment.  # noqa: E501


        :return: The attachments of this DiaryAssignment.  # noqa: E501
        :rtype: list[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this DiaryAssignment.


        :param attachments: The attachments of this DiaryAssignment.  # noqa: E501
        :type: list[Attachment]
        """

        self._attachments = attachments

    @property
    def id(self):
        """Gets the id of this DiaryAssignment.  # noqa: E501


        :return: The id of this DiaryAssignment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiaryAssignment.


        :param id: The id of this DiaryAssignment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type_id(self):
        """Gets the type_id of this DiaryAssignment.  # noqa: E501


        :return: The type_id of this DiaryAssignment.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this DiaryAssignment.


        :param type_id: The type_id of this DiaryAssignment.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def assignment_name(self):
        """Gets the assignment_name of this DiaryAssignment.  # noqa: E501


        :return: The assignment_name of this DiaryAssignment.  # noqa: E501
        :rtype: str
        """
        return self._assignment_name

    @assignment_name.setter
    def assignment_name(self, assignment_name):
        """Sets the assignment_name of this DiaryAssignment.


        :param assignment_name: The assignment_name of this DiaryAssignment.  # noqa: E501
        :type: str
        """

        self._assignment_name = assignment_name

    @property
    def weight(self):
        """Gets the weight of this DiaryAssignment.  # noqa: E501


        :return: The weight of this DiaryAssignment.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this DiaryAssignment.


        :param weight: The weight of this DiaryAssignment.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def due_date(self):
        """Gets the due_date of this DiaryAssignment.  # noqa: E501


        :return: The due_date of this DiaryAssignment.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this DiaryAssignment.


        :param due_date: The due_date of this DiaryAssignment.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def class_meeting_id(self):
        """Gets the class_meeting_id of this DiaryAssignment.  # noqa: E501


        :return: The class_meeting_id of this DiaryAssignment.  # noqa: E501
        :rtype: int
        """
        return self._class_meeting_id

    @class_meeting_id.setter
    def class_meeting_id(self, class_meeting_id):
        """Sets the class_meeting_id of this DiaryAssignment.


        :param class_meeting_id: The class_meeting_id of this DiaryAssignment.  # noqa: E501
        :type: int
        """

        self._class_meeting_id = class_meeting_id

    @property
    def exists_test_plan(self):
        """Gets the exists_test_plan of this DiaryAssignment.  # noqa: E501


        :return: The exists_test_plan of this DiaryAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._exists_test_plan

    @exists_test_plan.setter
    def exists_test_plan(self, exists_test_plan):
        """Sets the exists_test_plan of this DiaryAssignment.


        :param exists_test_plan: The exists_test_plan of this DiaryAssignment.  # noqa: E501
        :type: bool
        """

        self._exists_test_plan = exists_test_plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiaryAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiaryAssignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
