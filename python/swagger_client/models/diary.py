# coding: utf-8

"""
    NetSchool

    The API for the NetSchool irTech project  # noqa: E501

    OpenAPI spec version: 5.10.63221
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Diary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'week_start': 'str',
        'week_end': 'str',
        'week_days': 'list[DiaryWeekDays]',
        'term_name': 'str',
        'class_name': 'str'
    }

    attribute_map = {
        'week_start': 'weekStart',
        'week_end': 'weekEnd',
        'week_days': 'weekDays',
        'term_name': 'termName',
        'class_name': 'className'
    }

    def __init__(self, week_start=None, week_end=None, week_days=None, term_name=None, class_name=None):  # noqa: E501
        """Diary - a model defined in Swagger"""  # noqa: E501
        self._week_start = None
        self._week_end = None
        self._week_days = None
        self._term_name = None
        self._class_name = None
        self.discriminator = None
        if week_start is not None:
            self.week_start = week_start
        if week_end is not None:
            self.week_end = week_end
        if week_days is not None:
            self.week_days = week_days
        if term_name is not None:
            self.term_name = term_name
        if class_name is not None:
            self.class_name = class_name

    @property
    def week_start(self):
        """Gets the week_start of this Diary.  # noqa: E501


        :return: The week_start of this Diary.  # noqa: E501
        :rtype: str
        """
        return self._week_start

    @week_start.setter
    def week_start(self, week_start):
        """Sets the week_start of this Diary.


        :param week_start: The week_start of this Diary.  # noqa: E501
        :type: str
        """

        self._week_start = week_start

    @property
    def week_end(self):
        """Gets the week_end of this Diary.  # noqa: E501


        :return: The week_end of this Diary.  # noqa: E501
        :rtype: str
        """
        return self._week_end

    @week_end.setter
    def week_end(self, week_end):
        """Sets the week_end of this Diary.


        :param week_end: The week_end of this Diary.  # noqa: E501
        :type: str
        """

        self._week_end = week_end

    @property
    def week_days(self):
        """Gets the week_days of this Diary.  # noqa: E501


        :return: The week_days of this Diary.  # noqa: E501
        :rtype: list[DiaryWeekDays]
        """
        return self._week_days

    @week_days.setter
    def week_days(self, week_days):
        """Sets the week_days of this Diary.


        :param week_days: The week_days of this Diary.  # noqa: E501
        :type: list[DiaryWeekDays]
        """

        self._week_days = week_days

    @property
    def term_name(self):
        """Gets the term_name of this Diary.  # noqa: E501


        :return: The term_name of this Diary.  # noqa: E501
        :rtype: str
        """
        return self._term_name

    @term_name.setter
    def term_name(self, term_name):
        """Sets the term_name of this Diary.


        :param term_name: The term_name of this Diary.  # noqa: E501
        :type: str
        """

        self._term_name = term_name

    @property
    def class_name(self):
        """Gets the class_name of this Diary.  # noqa: E501


        :return: The class_name of this Diary.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this Diary.


        :param class_name: The class_name of this Diary.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Diary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Diary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
