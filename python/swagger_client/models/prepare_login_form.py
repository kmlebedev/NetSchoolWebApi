# coding: utf-8

"""
    NetSchool

    The API for the NetSchool irTech project  # noqa: E501

    OpenAPI spec version: 4.30.43656
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrepareLoginForm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'countries': 'list[PrepareEmLoginFormCountries]',
        'states': 'list[PrepareEmLoginFormCountries]',
        'provinces': 'list[PrepareEmLoginFormCountries]',
        'cities': 'list[PrepareEmLoginFormCountries]',
        'funcs': 'list[PrepareEmLoginFormCountries]',
        'schools': 'list[PrepareEmLoginFormCountries]',
        'cid': 'int',
        'sid': 'int',
        'pid': 'int',
        'cn': 'int',
        'sft': 'int',
        'scid': 'int',
        'hlevels': 'object',
        'ems': 'object'
    }

    attribute_map = {
        'countries': 'countries',
        'states': 'states',
        'provinces': 'provinces',
        'cities': 'cities',
        'funcs': 'funcs',
        'schools': 'schools',
        'cid': 'cid',
        'sid': 'sid',
        'pid': 'pid',
        'cn': 'cn',
        'sft': 'sft',
        'scid': 'scid',
        'hlevels': 'hlevels',
        'ems': 'ems'
    }

    def __init__(self, countries=None, states=None, provinces=None, cities=None, funcs=None, schools=None, cid=None, sid=None, pid=None, cn=None, sft=None, scid=None, hlevels=None, ems=None):  # noqa: E501
        """PrepareLoginForm - a model defined in Swagger"""  # noqa: E501
        self._countries = None
        self._states = None
        self._provinces = None
        self._cities = None
        self._funcs = None
        self._schools = None
        self._cid = None
        self._sid = None
        self._pid = None
        self._cn = None
        self._sft = None
        self._scid = None
        self._hlevels = None
        self._ems = None
        self.discriminator = None
        if countries is not None:
            self.countries = countries
        if states is not None:
            self.states = states
        if provinces is not None:
            self.provinces = provinces
        if cities is not None:
            self.cities = cities
        if funcs is not None:
            self.funcs = funcs
        if schools is not None:
            self.schools = schools
        if cid is not None:
            self.cid = cid
        if sid is not None:
            self.sid = sid
        if pid is not None:
            self.pid = pid
        if cn is not None:
            self.cn = cn
        if sft is not None:
            self.sft = sft
        if scid is not None:
            self.scid = scid
        if hlevels is not None:
            self.hlevels = hlevels
        if ems is not None:
            self.ems = ems

    @property
    def countries(self):
        """Gets the countries of this PrepareLoginForm.  # noqa: E501


        :return: The countries of this PrepareLoginForm.  # noqa: E501
        :rtype: list[PrepareEmLoginFormCountries]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this PrepareLoginForm.


        :param countries: The countries of this PrepareLoginForm.  # noqa: E501
        :type: list[PrepareEmLoginFormCountries]
        """

        self._countries = countries

    @property
    def states(self):
        """Gets the states of this PrepareLoginForm.  # noqa: E501


        :return: The states of this PrepareLoginForm.  # noqa: E501
        :rtype: list[PrepareEmLoginFormCountries]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this PrepareLoginForm.


        :param states: The states of this PrepareLoginForm.  # noqa: E501
        :type: list[PrepareEmLoginFormCountries]
        """

        self._states = states

    @property
    def provinces(self):
        """Gets the provinces of this PrepareLoginForm.  # noqa: E501


        :return: The provinces of this PrepareLoginForm.  # noqa: E501
        :rtype: list[PrepareEmLoginFormCountries]
        """
        return self._provinces

    @provinces.setter
    def provinces(self, provinces):
        """Sets the provinces of this PrepareLoginForm.


        :param provinces: The provinces of this PrepareLoginForm.  # noqa: E501
        :type: list[PrepareEmLoginFormCountries]
        """

        self._provinces = provinces

    @property
    def cities(self):
        """Gets the cities of this PrepareLoginForm.  # noqa: E501


        :return: The cities of this PrepareLoginForm.  # noqa: E501
        :rtype: list[PrepareEmLoginFormCountries]
        """
        return self._cities

    @cities.setter
    def cities(self, cities):
        """Sets the cities of this PrepareLoginForm.


        :param cities: The cities of this PrepareLoginForm.  # noqa: E501
        :type: list[PrepareEmLoginFormCountries]
        """

        self._cities = cities

    @property
    def funcs(self):
        """Gets the funcs of this PrepareLoginForm.  # noqa: E501


        :return: The funcs of this PrepareLoginForm.  # noqa: E501
        :rtype: list[PrepareEmLoginFormCountries]
        """
        return self._funcs

    @funcs.setter
    def funcs(self, funcs):
        """Sets the funcs of this PrepareLoginForm.


        :param funcs: The funcs of this PrepareLoginForm.  # noqa: E501
        :type: list[PrepareEmLoginFormCountries]
        """

        self._funcs = funcs

    @property
    def schools(self):
        """Gets the schools of this PrepareLoginForm.  # noqa: E501


        :return: The schools of this PrepareLoginForm.  # noqa: E501
        :rtype: list[PrepareEmLoginFormCountries]
        """
        return self._schools

    @schools.setter
    def schools(self, schools):
        """Sets the schools of this PrepareLoginForm.


        :param schools: The schools of this PrepareLoginForm.  # noqa: E501
        :type: list[PrepareEmLoginFormCountries]
        """

        self._schools = schools

    @property
    def cid(self):
        """Gets the cid of this PrepareLoginForm.  # noqa: E501


        :return: The cid of this PrepareLoginForm.  # noqa: E501
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this PrepareLoginForm.


        :param cid: The cid of this PrepareLoginForm.  # noqa: E501
        :type: int
        """

        self._cid = cid

    @property
    def sid(self):
        """Gets the sid of this PrepareLoginForm.  # noqa: E501


        :return: The sid of this PrepareLoginForm.  # noqa: E501
        :rtype: int
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this PrepareLoginForm.


        :param sid: The sid of this PrepareLoginForm.  # noqa: E501
        :type: int
        """

        self._sid = sid

    @property
    def pid(self):
        """Gets the pid of this PrepareLoginForm.  # noqa: E501


        :return: The pid of this PrepareLoginForm.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this PrepareLoginForm.


        :param pid: The pid of this PrepareLoginForm.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def cn(self):
        """Gets the cn of this PrepareLoginForm.  # noqa: E501


        :return: The cn of this PrepareLoginForm.  # noqa: E501
        :rtype: int
        """
        return self._cn

    @cn.setter
    def cn(self, cn):
        """Sets the cn of this PrepareLoginForm.


        :param cn: The cn of this PrepareLoginForm.  # noqa: E501
        :type: int
        """

        self._cn = cn

    @property
    def sft(self):
        """Gets the sft of this PrepareLoginForm.  # noqa: E501


        :return: The sft of this PrepareLoginForm.  # noqa: E501
        :rtype: int
        """
        return self._sft

    @sft.setter
    def sft(self, sft):
        """Sets the sft of this PrepareLoginForm.


        :param sft: The sft of this PrepareLoginForm.  # noqa: E501
        :type: int
        """

        self._sft = sft

    @property
    def scid(self):
        """Gets the scid of this PrepareLoginForm.  # noqa: E501


        :return: The scid of this PrepareLoginForm.  # noqa: E501
        :rtype: int
        """
        return self._scid

    @scid.setter
    def scid(self, scid):
        """Sets the scid of this PrepareLoginForm.


        :param scid: The scid of this PrepareLoginForm.  # noqa: E501
        :type: int
        """

        self._scid = scid

    @property
    def hlevels(self):
        """Gets the hlevels of this PrepareLoginForm.  # noqa: E501


        :return: The hlevels of this PrepareLoginForm.  # noqa: E501
        :rtype: object
        """
        return self._hlevels

    @hlevels.setter
    def hlevels(self, hlevels):
        """Sets the hlevels of this PrepareLoginForm.


        :param hlevels: The hlevels of this PrepareLoginForm.  # noqa: E501
        :type: object
        """

        self._hlevels = hlevels

    @property
    def ems(self):
        """Gets the ems of this PrepareLoginForm.  # noqa: E501


        :return: The ems of this PrepareLoginForm.  # noqa: E501
        :rtype: object
        """
        return self._ems

    @ems.setter
    def ems(self, ems):
        """Sets the ems of this PrepareLoginForm.


        :param ems: The ems of this PrepareLoginForm.  # noqa: E501
        :type: object
        """

        self._ems = ems

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrepareLoginForm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrepareLoginForm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
