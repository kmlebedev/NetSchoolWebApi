# coding: utf-8

"""
    NetSchool

    The API for the NetSchool irTech project  # noqa: E501

    OpenAPI spec version: 5.10.63221
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StudentDiaryInitStudents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'student_id': 'int',
        'nick_name': 'str',
        'class_name': 'object',
        'class_id': 'int',
        'iup_grade': 'int'
    }

    attribute_map = {
        'student_id': 'studentId',
        'nick_name': 'nickName',
        'class_name': 'className',
        'class_id': 'classId',
        'iup_grade': 'iupGrade'
    }

    def __init__(self, student_id=None, nick_name=None, class_name=None, class_id=None, iup_grade=None):  # noqa: E501
        """StudentDiaryInitStudents - a model defined in Swagger"""  # noqa: E501
        self._student_id = None
        self._nick_name = None
        self._class_name = None
        self._class_id = None
        self._iup_grade = None
        self.discriminator = None
        if student_id is not None:
            self.student_id = student_id
        if nick_name is not None:
            self.nick_name = nick_name
        if class_name is not None:
            self.class_name = class_name
        if class_id is not None:
            self.class_id = class_id
        if iup_grade is not None:
            self.iup_grade = iup_grade

    @property
    def student_id(self):
        """Gets the student_id of this StudentDiaryInitStudents.  # noqa: E501


        :return: The student_id of this StudentDiaryInitStudents.  # noqa: E501
        :rtype: int
        """
        return self._student_id

    @student_id.setter
    def student_id(self, student_id):
        """Sets the student_id of this StudentDiaryInitStudents.


        :param student_id: The student_id of this StudentDiaryInitStudents.  # noqa: E501
        :type: int
        """

        self._student_id = student_id

    @property
    def nick_name(self):
        """Gets the nick_name of this StudentDiaryInitStudents.  # noqa: E501


        :return: The nick_name of this StudentDiaryInitStudents.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this StudentDiaryInitStudents.


        :param nick_name: The nick_name of this StudentDiaryInitStudents.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def class_name(self):
        """Gets the class_name of this StudentDiaryInitStudents.  # noqa: E501


        :return: The class_name of this StudentDiaryInitStudents.  # noqa: E501
        :rtype: object
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this StudentDiaryInitStudents.


        :param class_name: The class_name of this StudentDiaryInitStudents.  # noqa: E501
        :type: object
        """

        self._class_name = class_name

    @property
    def class_id(self):
        """Gets the class_id of this StudentDiaryInitStudents.  # noqa: E501


        :return: The class_id of this StudentDiaryInitStudents.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this StudentDiaryInitStudents.


        :param class_id: The class_id of this StudentDiaryInitStudents.  # noqa: E501
        :type: int
        """

        self._class_id = class_id

    @property
    def iup_grade(self):
        """Gets the iup_grade of this StudentDiaryInitStudents.  # noqa: E501


        :return: The iup_grade of this StudentDiaryInitStudents.  # noqa: E501
        :rtype: int
        """
        return self._iup_grade

    @iup_grade.setter
    def iup_grade(self, iup_grade):
        """Sets the iup_grade of this StudentDiaryInitStudents.


        :param iup_grade: The iup_grade of this StudentDiaryInitStudents.  # noqa: E501
        :type: int
        """

        self._iup_grade = iup_grade

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StudentDiaryInitStudents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudentDiaryInitStudents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
