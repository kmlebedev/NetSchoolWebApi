# coding: utf-8

"""
    NetSchool

    The API for the NetSchool irTech project  # noqa: E501

    OpenAPI spec version: 5.10.63221
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoginAccountInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_token': 'str',
        'secure_active_token': 'str',
        'current_organization': 'LoginAccountInfoCurrentOrganization',
        'user': 'LoginAccountInfoUser',
        'user_roles': 'LoginAccountInfoUserRoles',
        'organizations': 'list[LoginAccountInfoOrganizations]',
        'login_time': 'date',
        'active': 'bool',
        'can_login': 'bool',
        'store_tokens': 'bool',
        'access_token': 'str'
    }

    attribute_map = {
        'active_token': 'activeToken',
        'secure_active_token': 'secureActiveToken',
        'current_organization': 'currentOrganization',
        'user': 'user',
        'user_roles': 'userRoles',
        'organizations': 'organizations',
        'login_time': 'loginTime',
        'active': 'active',
        'can_login': 'canLogin',
        'store_tokens': 'storeTokens',
        'access_token': 'accessToken'
    }

    def __init__(self, active_token=None, secure_active_token=None, current_organization=None, user=None, user_roles=None, organizations=None, login_time=None, active=None, can_login=None, store_tokens=None, access_token=None):  # noqa: E501
        """LoginAccountInfo - a model defined in Swagger"""  # noqa: E501
        self._active_token = None
        self._secure_active_token = None
        self._current_organization = None
        self._user = None
        self._user_roles = None
        self._organizations = None
        self._login_time = None
        self._active = None
        self._can_login = None
        self._store_tokens = None
        self._access_token = None
        self.discriminator = None
        if active_token is not None:
            self.active_token = active_token
        if secure_active_token is not None:
            self.secure_active_token = secure_active_token
        if current_organization is not None:
            self.current_organization = current_organization
        if user is not None:
            self.user = user
        if user_roles is not None:
            self.user_roles = user_roles
        if organizations is not None:
            self.organizations = organizations
        if login_time is not None:
            self.login_time = login_time
        if active is not None:
            self.active = active
        if can_login is not None:
            self.can_login = can_login
        if store_tokens is not None:
            self.store_tokens = store_tokens
        if access_token is not None:
            self.access_token = access_token

    @property
    def active_token(self):
        """Gets the active_token of this LoginAccountInfo.  # noqa: E501


        :return: The active_token of this LoginAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._active_token

    @active_token.setter
    def active_token(self, active_token):
        """Sets the active_token of this LoginAccountInfo.


        :param active_token: The active_token of this LoginAccountInfo.  # noqa: E501
        :type: str
        """

        self._active_token = active_token

    @property
    def secure_active_token(self):
        """Gets the secure_active_token of this LoginAccountInfo.  # noqa: E501


        :return: The secure_active_token of this LoginAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._secure_active_token

    @secure_active_token.setter
    def secure_active_token(self, secure_active_token):
        """Sets the secure_active_token of this LoginAccountInfo.


        :param secure_active_token: The secure_active_token of this LoginAccountInfo.  # noqa: E501
        :type: str
        """

        self._secure_active_token = secure_active_token

    @property
    def current_organization(self):
        """Gets the current_organization of this LoginAccountInfo.  # noqa: E501


        :return: The current_organization of this LoginAccountInfo.  # noqa: E501
        :rtype: LoginAccountInfoCurrentOrganization
        """
        return self._current_organization

    @current_organization.setter
    def current_organization(self, current_organization):
        """Sets the current_organization of this LoginAccountInfo.


        :param current_organization: The current_organization of this LoginAccountInfo.  # noqa: E501
        :type: LoginAccountInfoCurrentOrganization
        """

        self._current_organization = current_organization

    @property
    def user(self):
        """Gets the user of this LoginAccountInfo.  # noqa: E501


        :return: The user of this LoginAccountInfo.  # noqa: E501
        :rtype: LoginAccountInfoUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LoginAccountInfo.


        :param user: The user of this LoginAccountInfo.  # noqa: E501
        :type: LoginAccountInfoUser
        """

        self._user = user

    @property
    def user_roles(self):
        """Gets the user_roles of this LoginAccountInfo.  # noqa: E501


        :return: The user_roles of this LoginAccountInfo.  # noqa: E501
        :rtype: LoginAccountInfoUserRoles
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this LoginAccountInfo.


        :param user_roles: The user_roles of this LoginAccountInfo.  # noqa: E501
        :type: LoginAccountInfoUserRoles
        """

        self._user_roles = user_roles

    @property
    def organizations(self):
        """Gets the organizations of this LoginAccountInfo.  # noqa: E501


        :return: The organizations of this LoginAccountInfo.  # noqa: E501
        :rtype: list[LoginAccountInfoOrganizations]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this LoginAccountInfo.


        :param organizations: The organizations of this LoginAccountInfo.  # noqa: E501
        :type: list[LoginAccountInfoOrganizations]
        """

        self._organizations = organizations

    @property
    def login_time(self):
        """Gets the login_time of this LoginAccountInfo.  # noqa: E501


        :return: The login_time of this LoginAccountInfo.  # noqa: E501
        :rtype: date
        """
        return self._login_time

    @login_time.setter
    def login_time(self, login_time):
        """Sets the login_time of this LoginAccountInfo.


        :param login_time: The login_time of this LoginAccountInfo.  # noqa: E501
        :type: date
        """

        self._login_time = login_time

    @property
    def active(self):
        """Gets the active of this LoginAccountInfo.  # noqa: E501


        :return: The active of this LoginAccountInfo.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this LoginAccountInfo.


        :param active: The active of this LoginAccountInfo.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def can_login(self):
        """Gets the can_login of this LoginAccountInfo.  # noqa: E501


        :return: The can_login of this LoginAccountInfo.  # noqa: E501
        :rtype: bool
        """
        return self._can_login

    @can_login.setter
    def can_login(self, can_login):
        """Sets the can_login of this LoginAccountInfo.


        :param can_login: The can_login of this LoginAccountInfo.  # noqa: E501
        :type: bool
        """

        self._can_login = can_login

    @property
    def store_tokens(self):
        """Gets the store_tokens of this LoginAccountInfo.  # noqa: E501


        :return: The store_tokens of this LoginAccountInfo.  # noqa: E501
        :rtype: bool
        """
        return self._store_tokens

    @store_tokens.setter
    def store_tokens(self, store_tokens):
        """Sets the store_tokens of this LoginAccountInfo.


        :param store_tokens: The store_tokens of this LoginAccountInfo.  # noqa: E501
        :type: bool
        """

        self._store_tokens = store_tokens

    @property
    def access_token(self):
        """Gets the access_token of this LoginAccountInfo.  # noqa: E501


        :return: The access_token of this LoginAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this LoginAccountInfo.


        :param access_token: The access_token of this LoginAccountInfo.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginAccountInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginAccountInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
