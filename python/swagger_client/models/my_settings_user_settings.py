# coding: utf-8

"""
    NetSchool

    The API for the NetSchool irTech project  # noqa: E501

    OpenAPI spec version: 5.10.63221
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MySettingsUserSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'show_mobile_phone': 'bool',
        'default_desktop': 'int',
        'language': 'str',
        'favorite_reports': 'list[str]',
        'password_expired': 'int',
        'recovery_answer': 'str',
        'recovery_question': 'str',
        'theme': 'int',
        'user_id': 'int',
        'show_net_school_app': 'bool'
    }

    attribute_map = {
        'show_mobile_phone': 'showMobilePhone',
        'default_desktop': 'defaultDesktop',
        'language': 'language',
        'favorite_reports': 'favoriteReports',
        'password_expired': 'passwordExpired',
        'recovery_answer': 'recoveryAnswer',
        'recovery_question': 'recoveryQuestion',
        'theme': 'theme',
        'user_id': 'userId',
        'show_net_school_app': 'showNetSchoolApp'
    }

    def __init__(self, show_mobile_phone=None, default_desktop=None, language=None, favorite_reports=None, password_expired=None, recovery_answer=None, recovery_question=None, theme=None, user_id=None, show_net_school_app=None):  # noqa: E501
        """MySettingsUserSettings - a model defined in Swagger"""  # noqa: E501
        self._show_mobile_phone = None
        self._default_desktop = None
        self._language = None
        self._favorite_reports = None
        self._password_expired = None
        self._recovery_answer = None
        self._recovery_question = None
        self._theme = None
        self._user_id = None
        self._show_net_school_app = None
        self.discriminator = None
        if show_mobile_phone is not None:
            self.show_mobile_phone = show_mobile_phone
        if default_desktop is not None:
            self.default_desktop = default_desktop
        if language is not None:
            self.language = language
        if favorite_reports is not None:
            self.favorite_reports = favorite_reports
        if password_expired is not None:
            self.password_expired = password_expired
        if recovery_answer is not None:
            self.recovery_answer = recovery_answer
        if recovery_question is not None:
            self.recovery_question = recovery_question
        if theme is not None:
            self.theme = theme
        if user_id is not None:
            self.user_id = user_id
        if show_net_school_app is not None:
            self.show_net_school_app = show_net_school_app

    @property
    def show_mobile_phone(self):
        """Gets the show_mobile_phone of this MySettingsUserSettings.  # noqa: E501


        :return: The show_mobile_phone of this MySettingsUserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._show_mobile_phone

    @show_mobile_phone.setter
    def show_mobile_phone(self, show_mobile_phone):
        """Sets the show_mobile_phone of this MySettingsUserSettings.


        :param show_mobile_phone: The show_mobile_phone of this MySettingsUserSettings.  # noqa: E501
        :type: bool
        """

        self._show_mobile_phone = show_mobile_phone

    @property
    def default_desktop(self):
        """Gets the default_desktop of this MySettingsUserSettings.  # noqa: E501


        :return: The default_desktop of this MySettingsUserSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_desktop

    @default_desktop.setter
    def default_desktop(self, default_desktop):
        """Sets the default_desktop of this MySettingsUserSettings.


        :param default_desktop: The default_desktop of this MySettingsUserSettings.  # noqa: E501
        :type: int
        """

        self._default_desktop = default_desktop

    @property
    def language(self):
        """Gets the language of this MySettingsUserSettings.  # noqa: E501


        :return: The language of this MySettingsUserSettings.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this MySettingsUserSettings.


        :param language: The language of this MySettingsUserSettings.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def favorite_reports(self):
        """Gets the favorite_reports of this MySettingsUserSettings.  # noqa: E501


        :return: The favorite_reports of this MySettingsUserSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._favorite_reports

    @favorite_reports.setter
    def favorite_reports(self, favorite_reports):
        """Sets the favorite_reports of this MySettingsUserSettings.


        :param favorite_reports: The favorite_reports of this MySettingsUserSettings.  # noqa: E501
        :type: list[str]
        """

        self._favorite_reports = favorite_reports

    @property
    def password_expired(self):
        """Gets the password_expired of this MySettingsUserSettings.  # noqa: E501


        :return: The password_expired of this MySettingsUserSettings.  # noqa: E501
        :rtype: int
        """
        return self._password_expired

    @password_expired.setter
    def password_expired(self, password_expired):
        """Sets the password_expired of this MySettingsUserSettings.


        :param password_expired: The password_expired of this MySettingsUserSettings.  # noqa: E501
        :type: int
        """

        self._password_expired = password_expired

    @property
    def recovery_answer(self):
        """Gets the recovery_answer of this MySettingsUserSettings.  # noqa: E501


        :return: The recovery_answer of this MySettingsUserSettings.  # noqa: E501
        :rtype: str
        """
        return self._recovery_answer

    @recovery_answer.setter
    def recovery_answer(self, recovery_answer):
        """Sets the recovery_answer of this MySettingsUserSettings.


        :param recovery_answer: The recovery_answer of this MySettingsUserSettings.  # noqa: E501
        :type: str
        """

        self._recovery_answer = recovery_answer

    @property
    def recovery_question(self):
        """Gets the recovery_question of this MySettingsUserSettings.  # noqa: E501


        :return: The recovery_question of this MySettingsUserSettings.  # noqa: E501
        :rtype: str
        """
        return self._recovery_question

    @recovery_question.setter
    def recovery_question(self, recovery_question):
        """Sets the recovery_question of this MySettingsUserSettings.


        :param recovery_question: The recovery_question of this MySettingsUserSettings.  # noqa: E501
        :type: str
        """

        self._recovery_question = recovery_question

    @property
    def theme(self):
        """Gets the theme of this MySettingsUserSettings.  # noqa: E501


        :return: The theme of this MySettingsUserSettings.  # noqa: E501
        :rtype: int
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this MySettingsUserSettings.


        :param theme: The theme of this MySettingsUserSettings.  # noqa: E501
        :type: int
        """

        self._theme = theme

    @property
    def user_id(self):
        """Gets the user_id of this MySettingsUserSettings.  # noqa: E501


        :return: The user_id of this MySettingsUserSettings.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MySettingsUserSettings.


        :param user_id: The user_id of this MySettingsUserSettings.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def show_net_school_app(self):
        """Gets the show_net_school_app of this MySettingsUserSettings.  # noqa: E501


        :return: The show_net_school_app of this MySettingsUserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._show_net_school_app

    @show_net_school_app.setter
    def show_net_school_app(self, show_net_school_app):
        """Sets the show_net_school_app of this MySettingsUserSettings.


        :param show_net_school_app: The show_net_school_app of this MySettingsUserSettings.  # noqa: E501
        :type: bool
        """

        self._show_net_school_app = show_net_school_app

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MySettingsUserSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MySettingsUserSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
