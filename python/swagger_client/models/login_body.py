# coding: utf-8

"""
    NetSchool

    The API for the NetSchool irTech project  # noqa: E501

    OpenAPI spec version: 5.10.63221
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoginBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'login_type': 'int',
        'cid': 'int',
        'sid': 'int',
        'pid': 'int',
        'cn': 'int',
        'sft': 'int',
        'scid': 'int',
        'un': 'str',
        'pw': 'str',
        'lt': 'int',
        'pw2': 'str',
        'ver': 'int'
    }

    attribute_map = {
        'login_type': 'LoginType',
        'cid': 'cid',
        'sid': 'sid',
        'pid': 'pid',
        'cn': 'cn',
        'sft': 'sft',
        'scid': 'scid',
        'un': 'UN',
        'pw': 'PW',
        'lt': 'lt',
        'pw2': 'pw2',
        'ver': 'ver'
    }

    def __init__(self, login_type=None, cid=None, sid=None, pid=None, cn=None, sft=None, scid=None, un=None, pw=None, lt=None, pw2=None, ver=None):  # noqa: E501
        """LoginBody - a model defined in Swagger"""  # noqa: E501
        self._login_type = None
        self._cid = None
        self._sid = None
        self._pid = None
        self._cn = None
        self._sft = None
        self._scid = None
        self._un = None
        self._pw = None
        self._lt = None
        self._pw2 = None
        self._ver = None
        self.discriminator = None
        if login_type is not None:
            self.login_type = login_type
        if cid is not None:
            self.cid = cid
        if sid is not None:
            self.sid = sid
        if pid is not None:
            self.pid = pid
        if cn is not None:
            self.cn = cn
        if sft is not None:
            self.sft = sft
        if scid is not None:
            self.scid = scid
        if un is not None:
            self.un = un
        if pw is not None:
            self.pw = pw
        if lt is not None:
            self.lt = lt
        if pw2 is not None:
            self.pw2 = pw2
        if ver is not None:
            self.ver = ver

    @property
    def login_type(self):
        """Gets the login_type of this LoginBody.  # noqa: E501


        :return: The login_type of this LoginBody.  # noqa: E501
        :rtype: int
        """
        return self._login_type

    @login_type.setter
    def login_type(self, login_type):
        """Sets the login_type of this LoginBody.


        :param login_type: The login_type of this LoginBody.  # noqa: E501
        :type: int
        """

        self._login_type = login_type

    @property
    def cid(self):
        """Gets the cid of this LoginBody.  # noqa: E501


        :return: The cid of this LoginBody.  # noqa: E501
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this LoginBody.


        :param cid: The cid of this LoginBody.  # noqa: E501
        :type: int
        """

        self._cid = cid

    @property
    def sid(self):
        """Gets the sid of this LoginBody.  # noqa: E501


        :return: The sid of this LoginBody.  # noqa: E501
        :rtype: int
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this LoginBody.


        :param sid: The sid of this LoginBody.  # noqa: E501
        :type: int
        """

        self._sid = sid

    @property
    def pid(self):
        """Gets the pid of this LoginBody.  # noqa: E501


        :return: The pid of this LoginBody.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this LoginBody.


        :param pid: The pid of this LoginBody.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def cn(self):
        """Gets the cn of this LoginBody.  # noqa: E501


        :return: The cn of this LoginBody.  # noqa: E501
        :rtype: int
        """
        return self._cn

    @cn.setter
    def cn(self, cn):
        """Sets the cn of this LoginBody.


        :param cn: The cn of this LoginBody.  # noqa: E501
        :type: int
        """

        self._cn = cn

    @property
    def sft(self):
        """Gets the sft of this LoginBody.  # noqa: E501


        :return: The sft of this LoginBody.  # noqa: E501
        :rtype: int
        """
        return self._sft

    @sft.setter
    def sft(self, sft):
        """Sets the sft of this LoginBody.


        :param sft: The sft of this LoginBody.  # noqa: E501
        :type: int
        """

        self._sft = sft

    @property
    def scid(self):
        """Gets the scid of this LoginBody.  # noqa: E501


        :return: The scid of this LoginBody.  # noqa: E501
        :rtype: int
        """
        return self._scid

    @scid.setter
    def scid(self, scid):
        """Sets the scid of this LoginBody.


        :param scid: The scid of this LoginBody.  # noqa: E501
        :type: int
        """

        self._scid = scid

    @property
    def un(self):
        """Gets the un of this LoginBody.  # noqa: E501


        :return: The un of this LoginBody.  # noqa: E501
        :rtype: str
        """
        return self._un

    @un.setter
    def un(self, un):
        """Sets the un of this LoginBody.


        :param un: The un of this LoginBody.  # noqa: E501
        :type: str
        """

        self._un = un

    @property
    def pw(self):
        """Gets the pw of this LoginBody.  # noqa: E501


        :return: The pw of this LoginBody.  # noqa: E501
        :rtype: str
        """
        return self._pw

    @pw.setter
    def pw(self, pw):
        """Sets the pw of this LoginBody.


        :param pw: The pw of this LoginBody.  # noqa: E501
        :type: str
        """

        self._pw = pw

    @property
    def lt(self):
        """Gets the lt of this LoginBody.  # noqa: E501


        :return: The lt of this LoginBody.  # noqa: E501
        :rtype: int
        """
        return self._lt

    @lt.setter
    def lt(self, lt):
        """Sets the lt of this LoginBody.


        :param lt: The lt of this LoginBody.  # noqa: E501
        :type: int
        """

        self._lt = lt

    @property
    def pw2(self):
        """Gets the pw2 of this LoginBody.  # noqa: E501


        :return: The pw2 of this LoginBody.  # noqa: E501
        :rtype: str
        """
        return self._pw2

    @pw2.setter
    def pw2(self, pw2):
        """Sets the pw2 of this LoginBody.


        :param pw2: The pw2 of this LoginBody.  # noqa: E501
        :type: str
        """

        self._pw2 = pw2

    @property
    def ver(self):
        """Gets the ver of this LoginBody.  # noqa: E501


        :return: The ver of this LoginBody.  # noqa: E501
        :rtype: int
        """
        return self._ver

    @ver.setter
    def ver(self, ver):
        """Sets the ver of this LoginBody.


        :param ver: The ver of this LoginBody.  # noqa: E501
        :type: int
        """

        self._ver = ver

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
