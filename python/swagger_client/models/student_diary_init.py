# coding: utf-8

"""
    NetSchool

    The API for the NetSchool irTech project  # noqa: E501

    OpenAPI spec version: 4.30.43656
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StudentDiaryInit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'students': 'list[StudentDiaryInitStudents]',
        'current_student_id': 'int',
        'week_start': 'date',
        'ya_class': 'bool',
        'ya_class_auth_url': 'str',
        'new_disk_token': 'str',
        'new_disk_was_request': 'bool',
        'ttsu_rl': 'str',
        'external_url': 'str',
        'weight': 'bool',
        'max_mark': 'int',
        'with_la_assigns': 'bool'
    }

    attribute_map = {
        'students': 'students',
        'current_student_id': 'currentStudentId',
        'week_start': 'weekStart',
        'ya_class': 'yaClass',
        'ya_class_auth_url': 'yaClassAuthUrl',
        'new_disk_token': 'newDiskToken',
        'new_disk_was_request': 'newDiskWasRequest',
        'ttsu_rl': 'ttsuRl',
        'external_url': 'externalUrl',
        'weight': 'weight',
        'max_mark': 'maxMark',
        'with_la_assigns': 'withLaAssigns'
    }

    def __init__(self, students=None, current_student_id=None, week_start=None, ya_class=None, ya_class_auth_url=None, new_disk_token=None, new_disk_was_request=None, ttsu_rl=None, external_url=None, weight=None, max_mark=None, with_la_assigns=None):  # noqa: E501
        """StudentDiaryInit - a model defined in Swagger"""  # noqa: E501
        self._students = None
        self._current_student_id = None
        self._week_start = None
        self._ya_class = None
        self._ya_class_auth_url = None
        self._new_disk_token = None
        self._new_disk_was_request = None
        self._ttsu_rl = None
        self._external_url = None
        self._weight = None
        self._max_mark = None
        self._with_la_assigns = None
        self.discriminator = None
        if students is not None:
            self.students = students
        if current_student_id is not None:
            self.current_student_id = current_student_id
        if week_start is not None:
            self.week_start = week_start
        if ya_class is not None:
            self.ya_class = ya_class
        if ya_class_auth_url is not None:
            self.ya_class_auth_url = ya_class_auth_url
        if new_disk_token is not None:
            self.new_disk_token = new_disk_token
        if new_disk_was_request is not None:
            self.new_disk_was_request = new_disk_was_request
        if ttsu_rl is not None:
            self.ttsu_rl = ttsu_rl
        if external_url is not None:
            self.external_url = external_url
        if weight is not None:
            self.weight = weight
        if max_mark is not None:
            self.max_mark = max_mark
        if with_la_assigns is not None:
            self.with_la_assigns = with_la_assigns

    @property
    def students(self):
        """Gets the students of this StudentDiaryInit.  # noqa: E501


        :return: The students of this StudentDiaryInit.  # noqa: E501
        :rtype: list[StudentDiaryInitStudents]
        """
        return self._students

    @students.setter
    def students(self, students):
        """Sets the students of this StudentDiaryInit.


        :param students: The students of this StudentDiaryInit.  # noqa: E501
        :type: list[StudentDiaryInitStudents]
        """

        self._students = students

    @property
    def current_student_id(self):
        """Gets the current_student_id of this StudentDiaryInit.  # noqa: E501


        :return: The current_student_id of this StudentDiaryInit.  # noqa: E501
        :rtype: int
        """
        return self._current_student_id

    @current_student_id.setter
    def current_student_id(self, current_student_id):
        """Sets the current_student_id of this StudentDiaryInit.


        :param current_student_id: The current_student_id of this StudentDiaryInit.  # noqa: E501
        :type: int
        """

        self._current_student_id = current_student_id

    @property
    def week_start(self):
        """Gets the week_start of this StudentDiaryInit.  # noqa: E501


        :return: The week_start of this StudentDiaryInit.  # noqa: E501
        :rtype: date
        """
        return self._week_start

    @week_start.setter
    def week_start(self, week_start):
        """Sets the week_start of this StudentDiaryInit.


        :param week_start: The week_start of this StudentDiaryInit.  # noqa: E501
        :type: date
        """

        self._week_start = week_start

    @property
    def ya_class(self):
        """Gets the ya_class of this StudentDiaryInit.  # noqa: E501


        :return: The ya_class of this StudentDiaryInit.  # noqa: E501
        :rtype: bool
        """
        return self._ya_class

    @ya_class.setter
    def ya_class(self, ya_class):
        """Sets the ya_class of this StudentDiaryInit.


        :param ya_class: The ya_class of this StudentDiaryInit.  # noqa: E501
        :type: bool
        """

        self._ya_class = ya_class

    @property
    def ya_class_auth_url(self):
        """Gets the ya_class_auth_url of this StudentDiaryInit.  # noqa: E501


        :return: The ya_class_auth_url of this StudentDiaryInit.  # noqa: E501
        :rtype: str
        """
        return self._ya_class_auth_url

    @ya_class_auth_url.setter
    def ya_class_auth_url(self, ya_class_auth_url):
        """Sets the ya_class_auth_url of this StudentDiaryInit.


        :param ya_class_auth_url: The ya_class_auth_url of this StudentDiaryInit.  # noqa: E501
        :type: str
        """

        self._ya_class_auth_url = ya_class_auth_url

    @property
    def new_disk_token(self):
        """Gets the new_disk_token of this StudentDiaryInit.  # noqa: E501


        :return: The new_disk_token of this StudentDiaryInit.  # noqa: E501
        :rtype: str
        """
        return self._new_disk_token

    @new_disk_token.setter
    def new_disk_token(self, new_disk_token):
        """Sets the new_disk_token of this StudentDiaryInit.


        :param new_disk_token: The new_disk_token of this StudentDiaryInit.  # noqa: E501
        :type: str
        """

        self._new_disk_token = new_disk_token

    @property
    def new_disk_was_request(self):
        """Gets the new_disk_was_request of this StudentDiaryInit.  # noqa: E501


        :return: The new_disk_was_request of this StudentDiaryInit.  # noqa: E501
        :rtype: bool
        """
        return self._new_disk_was_request

    @new_disk_was_request.setter
    def new_disk_was_request(self, new_disk_was_request):
        """Sets the new_disk_was_request of this StudentDiaryInit.


        :param new_disk_was_request: The new_disk_was_request of this StudentDiaryInit.  # noqa: E501
        :type: bool
        """

        self._new_disk_was_request = new_disk_was_request

    @property
    def ttsu_rl(self):
        """Gets the ttsu_rl of this StudentDiaryInit.  # noqa: E501


        :return: The ttsu_rl of this StudentDiaryInit.  # noqa: E501
        :rtype: str
        """
        return self._ttsu_rl

    @ttsu_rl.setter
    def ttsu_rl(self, ttsu_rl):
        """Sets the ttsu_rl of this StudentDiaryInit.


        :param ttsu_rl: The ttsu_rl of this StudentDiaryInit.  # noqa: E501
        :type: str
        """

        self._ttsu_rl = ttsu_rl

    @property
    def external_url(self):
        """Gets the external_url of this StudentDiaryInit.  # noqa: E501


        :return: The external_url of this StudentDiaryInit.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this StudentDiaryInit.


        :param external_url: The external_url of this StudentDiaryInit.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def weight(self):
        """Gets the weight of this StudentDiaryInit.  # noqa: E501


        :return: The weight of this StudentDiaryInit.  # noqa: E501
        :rtype: bool
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this StudentDiaryInit.


        :param weight: The weight of this StudentDiaryInit.  # noqa: E501
        :type: bool
        """

        self._weight = weight

    @property
    def max_mark(self):
        """Gets the max_mark of this StudentDiaryInit.  # noqa: E501


        :return: The max_mark of this StudentDiaryInit.  # noqa: E501
        :rtype: int
        """
        return self._max_mark

    @max_mark.setter
    def max_mark(self, max_mark):
        """Sets the max_mark of this StudentDiaryInit.


        :param max_mark: The max_mark of this StudentDiaryInit.  # noqa: E501
        :type: int
        """

        self._max_mark = max_mark

    @property
    def with_la_assigns(self):
        """Gets the with_la_assigns of this StudentDiaryInit.  # noqa: E501


        :return: The with_la_assigns of this StudentDiaryInit.  # noqa: E501
        :rtype: bool
        """
        return self._with_la_assigns

    @with_la_assigns.setter
    def with_la_assigns(self, with_la_assigns):
        """Sets the with_la_assigns of this StudentDiaryInit.


        :param with_la_assigns: The with_la_assigns of this StudentDiaryInit.  # noqa: E501
        :type: bool
        """

        self._with_la_assigns = with_la_assigns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StudentDiaryInit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudentDiaryInit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
