# coding: utf-8

"""
    NetSchool

    The API for the NetSchool irTech project  # noqa: E501

    OpenAPI spec version: 5.10.63221
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MySettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'middle_name': 'str',
        'login_name': 'str',
        'birth_date': 'date',
        'roles': 'list[str]',
        'schoolyear_id': 'int',
        'windows_account': 'str',
        'mobile_phone': 'str',
        'prefered_com': 'str',
        'email': 'str',
        'exists_photo': 'bool',
        'user_settings': 'MySettingsUserSettings'
    }

    attribute_map = {
        'user_id': 'userId',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'middle_name': 'middleName',
        'login_name': 'loginName',
        'birth_date': 'birthDate',
        'roles': 'roles',
        'schoolyear_id': 'schoolyearId',
        'windows_account': 'windowsAccount',
        'mobile_phone': 'mobilePhone',
        'prefered_com': 'preferedCom',
        'email': 'email',
        'exists_photo': 'existsPhoto',
        'user_settings': 'userSettings'
    }

    def __init__(self, user_id=None, first_name=None, last_name=None, middle_name=None, login_name=None, birth_date=None, roles=None, schoolyear_id=None, windows_account=None, mobile_phone=None, prefered_com=None, email=None, exists_photo=None, user_settings=None):  # noqa: E501
        """MySettings - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._first_name = None
        self._last_name = None
        self._middle_name = None
        self._login_name = None
        self._birth_date = None
        self._roles = None
        self._schoolyear_id = None
        self._windows_account = None
        self._mobile_phone = None
        self._prefered_com = None
        self._email = None
        self._exists_photo = None
        self._user_settings = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if middle_name is not None:
            self.middle_name = middle_name
        if login_name is not None:
            self.login_name = login_name
        if birth_date is not None:
            self.birth_date = birth_date
        if roles is not None:
            self.roles = roles
        if schoolyear_id is not None:
            self.schoolyear_id = schoolyear_id
        if windows_account is not None:
            self.windows_account = windows_account
        if mobile_phone is not None:
            self.mobile_phone = mobile_phone
        if prefered_com is not None:
            self.prefered_com = prefered_com
        if email is not None:
            self.email = email
        if exists_photo is not None:
            self.exists_photo = exists_photo
        if user_settings is not None:
            self.user_settings = user_settings

    @property
    def user_id(self):
        """Gets the user_id of this MySettings.  # noqa: E501


        :return: The user_id of this MySettings.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MySettings.


        :param user_id: The user_id of this MySettings.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def first_name(self):
        """Gets the first_name of this MySettings.  # noqa: E501


        :return: The first_name of this MySettings.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this MySettings.


        :param first_name: The first_name of this MySettings.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this MySettings.  # noqa: E501


        :return: The last_name of this MySettings.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this MySettings.


        :param last_name: The last_name of this MySettings.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this MySettings.  # noqa: E501


        :return: The middle_name of this MySettings.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this MySettings.


        :param middle_name: The middle_name of this MySettings.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def login_name(self):
        """Gets the login_name of this MySettings.  # noqa: E501


        :return: The login_name of this MySettings.  # noqa: E501
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name):
        """Sets the login_name of this MySettings.


        :param login_name: The login_name of this MySettings.  # noqa: E501
        :type: str
        """

        self._login_name = login_name

    @property
    def birth_date(self):
        """Gets the birth_date of this MySettings.  # noqa: E501


        :return: The birth_date of this MySettings.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this MySettings.


        :param birth_date: The birth_date of this MySettings.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    @property
    def roles(self):
        """Gets the roles of this MySettings.  # noqa: E501


        :return: The roles of this MySettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this MySettings.


        :param roles: The roles of this MySettings.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def schoolyear_id(self):
        """Gets the schoolyear_id of this MySettings.  # noqa: E501


        :return: The schoolyear_id of this MySettings.  # noqa: E501
        :rtype: int
        """
        return self._schoolyear_id

    @schoolyear_id.setter
    def schoolyear_id(self, schoolyear_id):
        """Sets the schoolyear_id of this MySettings.


        :param schoolyear_id: The schoolyear_id of this MySettings.  # noqa: E501
        :type: int
        """

        self._schoolyear_id = schoolyear_id

    @property
    def windows_account(self):
        """Gets the windows_account of this MySettings.  # noqa: E501


        :return: The windows_account of this MySettings.  # noqa: E501
        :rtype: str
        """
        return self._windows_account

    @windows_account.setter
    def windows_account(self, windows_account):
        """Sets the windows_account of this MySettings.


        :param windows_account: The windows_account of this MySettings.  # noqa: E501
        :type: str
        """

        self._windows_account = windows_account

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this MySettings.  # noqa: E501


        :return: The mobile_phone of this MySettings.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this MySettings.


        :param mobile_phone: The mobile_phone of this MySettings.  # noqa: E501
        :type: str
        """

        self._mobile_phone = mobile_phone

    @property
    def prefered_com(self):
        """Gets the prefered_com of this MySettings.  # noqa: E501


        :return: The prefered_com of this MySettings.  # noqa: E501
        :rtype: str
        """
        return self._prefered_com

    @prefered_com.setter
    def prefered_com(self, prefered_com):
        """Sets the prefered_com of this MySettings.


        :param prefered_com: The prefered_com of this MySettings.  # noqa: E501
        :type: str
        """

        self._prefered_com = prefered_com

    @property
    def email(self):
        """Gets the email of this MySettings.  # noqa: E501


        :return: The email of this MySettings.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MySettings.


        :param email: The email of this MySettings.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def exists_photo(self):
        """Gets the exists_photo of this MySettings.  # noqa: E501


        :return: The exists_photo of this MySettings.  # noqa: E501
        :rtype: bool
        """
        return self._exists_photo

    @exists_photo.setter
    def exists_photo(self, exists_photo):
        """Sets the exists_photo of this MySettings.


        :param exists_photo: The exists_photo of this MySettings.  # noqa: E501
        :type: bool
        """

        self._exists_photo = exists_photo

    @property
    def user_settings(self):
        """Gets the user_settings of this MySettings.  # noqa: E501


        :return: The user_settings of this MySettings.  # noqa: E501
        :rtype: MySettingsUserSettings
        """
        return self._user_settings

    @user_settings.setter
    def user_settings(self, user_settings):
        """Sets the user_settings of this MySettings.


        :param user_settings: The user_settings of this MySettings.  # noqa: E501
        :type: MySettingsUserSettings
        """

        self._user_settings = user_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MySettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MySettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
