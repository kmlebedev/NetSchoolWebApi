/*
 * NetSchool
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {MySettings} from '../model/MySettings';
import {MySettingsYears} from '../model/MySettingsYears';

/**
* Mysettings service.
* @module api/MysettingsApi
* @version 5.10.63221
*/
export class MysettingsApi {

    /**
    * Constructs a new MysettingsApi. 
    * @alias module:api/MysettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the mysettings operation.
     * @callback moduleapi/MysettingsApi~mysettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MySettings{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns my settings
     * @param {String} at an authorization header
     * @param {module:api/MysettingsApi~mysettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    mysettings(at, callback) {
      
      let postBody = null;
      // verify the required parameter 'at' is set
      if (at === undefined || at === null) {
        throw new Error("Missing the required parameter 'at' when calling mysettings");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'at': at
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MySettings;

      return this.apiClient.callApi(
        '/mysettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yearlist operation.
     * @callback moduleapi/MysettingsApi~yearlistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MySettingsYears{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all years
     * @param {String} at an authorization header
     * @param {module:api/MysettingsApi~yearlistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yearlist(at, callback) {
      
      let postBody = null;
      // verify the required parameter 'at' is set
      if (at === undefined || at === null) {
        throw new Error("Missing the required parameter 'at' when calling yearlist");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'at': at
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MySettingsYears;

      return this.apiClient.callApi(
        '/mysettings/yearlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}