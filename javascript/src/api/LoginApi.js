/*
 * NetSchool
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 4.30.43656
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {LoginData} from '../model/LoginData';
import {PrepareEmLoginForm} from '../model/PrepareEmLoginForm';
import {PrepareLoginForm} from '../model/PrepareLoginForm';

/**
* Login service.
* @module api/LoginApi
* @version 4.30.43656
*/
export class LoginApi {

    /**
    * Constructs a new LoginApi. 
    * @alias module:api/LoginApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the logindata operation.
     * @callback moduleapi/LoginApi~logindataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all login data
     * @param {module:api/LoginApi~logindataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    logindata(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginData;

      return this.apiClient.callApi(
        '/logindata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the prepareemloginform operation.
     * @callback moduleapi/LoginApi~prepareemloginformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepareEmLoginForm{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all prepareemloginform
     * @param {Object} opts Optional parameters
     * @param {String} opts.cacheVer 
     * @param {module:api/LoginApi~prepareemloginformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    prepareemloginform(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'cacheVer': opts['cacheVer']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrepareEmLoginForm;

      return this.apiClient.callApi(
        '/prepareemloginform', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the prepareloginform operation.
     * @callback moduleapi/LoginApi~prepareloginformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepareLoginForm{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all prepareloginform
     * @param {Object} opts Optional parameters
     * @param {String} opts.cacheVer 
     * @param {module:api/LoginApi~prepareloginformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    prepareloginform(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'cacheVer': opts['cacheVer']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrepareLoginForm;

      return this.apiClient.callApi(
        '/prepareloginform', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}