/*
 * NetSchool
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {GetAuthData} from '../model/GetAuthData';
import {Login} from '../model/Login';
import {LoginData} from '../model/LoginData';
import {PrepareEmLoginForm} from '../model/PrepareEmLoginForm';
import {PrepareLoginForm} from '../model/PrepareLoginForm';

/**
* Login service.
* @module api/LoginApi
* @version 5.10.63221
*/
export class LoginApi {

    /**
    * Constructs a new LoginApi. 
    * @alias module:api/LoginApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getauthdata operation.
     * @callback moduleapi/LoginApi~getauthdataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuthData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all login data
     * @param {module:api/LoginApi~getauthdataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getauthdata(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAuthData;

      return this.apiClient.callApi(
        '/auth/getdata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the login operation.
     * @callback moduleapi/LoginApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Login{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all login data
     * @param {Number} loginType 
     * @param {Number} cid 
     * @param {Number} sid 
     * @param {Number} pid 
     * @param {Number} cn 
     * @param {Number} sft 
     * @param {Number} scid 
     * @param {String} UN 
     * @param {String} PW 
     * @param {Number} lt 
     * @param {String} pw2 
     * @param {Number} ver 
     * @param {module:api/LoginApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    login(loginType, cid, sid, pid, cn, sft, scid, UN, PW, lt, pw2, ver, callback) {
      
      let postBody = null;
      // verify the required parameter 'loginType' is set
      if (loginType === undefined || loginType === null) {
        throw new Error("Missing the required parameter 'loginType' when calling login");
      }
      // verify the required parameter 'cid' is set
      if (cid === undefined || cid === null) {
        throw new Error("Missing the required parameter 'cid' when calling login");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling login");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling login");
      }
      // verify the required parameter 'cn' is set
      if (cn === undefined || cn === null) {
        throw new Error("Missing the required parameter 'cn' when calling login");
      }
      // verify the required parameter 'sft' is set
      if (sft === undefined || sft === null) {
        throw new Error("Missing the required parameter 'sft' when calling login");
      }
      // verify the required parameter 'scid' is set
      if (scid === undefined || scid === null) {
        throw new Error("Missing the required parameter 'scid' when calling login");
      }
      // verify the required parameter 'UN' is set
      if (UN === undefined || UN === null) {
        throw new Error("Missing the required parameter 'UN' when calling login");
      }
      // verify the required parameter 'PW' is set
      if (PW === undefined || PW === null) {
        throw new Error("Missing the required parameter 'PW' when calling login");
      }
      // verify the required parameter 'lt' is set
      if (lt === undefined || lt === null) {
        throw new Error("Missing the required parameter 'lt' when calling login");
      }
      // verify the required parameter 'pw2' is set
      if (pw2 === undefined || pw2 === null) {
        throw new Error("Missing the required parameter 'pw2' when calling login");
      }
      // verify the required parameter 'ver' is set
      if (ver === undefined || ver === null) {
        throw new Error("Missing the required parameter 'ver' when calling login");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'LoginType': loginType,'cid': cid,'sid': sid,'pid': pid,'cn': cn,'sft': sft,'scid': scid,'UN': UN,'PW': PW,'lt': lt,'pw2': pw2,'ver': ver
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Login;

      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the logindata operation.
     * @callback moduleapi/LoginApi~logindataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all login data
     * @param {module:api/LoginApi~logindataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    logindata(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginData;

      return this.apiClient.callApi(
        '/logindata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the prepareemloginform operation.
     * @callback moduleapi/LoginApi~prepareemloginformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepareEmLoginForm{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all prepareemloginform
     * @param {Object} opts Optional parameters
     * @param {String} opts.cacheVer 
     * @param {module:api/LoginApi~prepareemloginformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    prepareemloginform(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'cacheVer': opts['cacheVer']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrepareEmLoginForm;

      return this.apiClient.callApi(
        '/prepareemloginform', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the prepareloginform operation.
     * @callback moduleapi/LoginApi~prepareloginformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepareLoginForm{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all prepareloginform
     * @param {Object} opts Optional parameters
     * @param {String} opts.cacheVer 
     * @param {module:api/LoginApi~prepareloginformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    prepareloginform(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'cacheVer': opts['cacheVer']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrepareLoginForm;

      return this.apiClient.callApi(
        '/prepareloginform', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}