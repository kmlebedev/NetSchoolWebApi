/*
 * NetSchool
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 4.30.43656
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetSchool);
  }
}(this, function(expect, NetSchool) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DiaryAssignment', function() {
      beforeEach(function() {
        instance = new NetSchool.DiaryAssignment();
      });

      it('should create an instance of DiaryAssignment', function() {
        // TODO: update the code to test DiaryAssignment
        expect(instance).to.be.a(NetSchool.DiaryAssignment);
      });

      it('should have the property mark (base name: "mark")', function() {
        // TODO: update the code to test the property mark
        expect(instance).to.have.property('mark');
        // expect(instance.mark).to.be(expectedValueLiteral);
      });

      it('should have the property attachments (base name: "attachments")', function() {
        // TODO: update the code to test the property attachments
        expect(instance).to.have.property('attachments');
        // expect(instance.attachments).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property typeId (base name: "typeId")', function() {
        // TODO: update the code to test the property typeId
        expect(instance).to.have.property('typeId');
        // expect(instance.typeId).to.be(expectedValueLiteral);
      });

      it('should have the property assignmentName (base name: "assignmentName")', function() {
        // TODO: update the code to test the property assignmentName
        expect(instance).to.have.property('assignmentName');
        // expect(instance.assignmentName).to.be(expectedValueLiteral);
      });

      it('should have the property weight (base name: "weight")', function() {
        // TODO: update the code to test the property weight
        expect(instance).to.have.property('weight');
        // expect(instance.weight).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "dueDate")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property classMeetingId (base name: "classMeetingId")', function() {
        // TODO: update the code to test the property classMeetingId
        expect(instance).to.have.property('classMeetingId');
        // expect(instance.classMeetingId).to.be(expectedValueLiteral);
      });

      it('should have the property existsTestPlan (base name: "existsTestPlan")', function() {
        // TODO: update the code to test the property existsTestPlan
        expect(instance).to.have.property('existsTestPlan');
        // expect(instance.existsTestPlan).to.be(expectedValueLiteral);
      });

    });
  });

}));
