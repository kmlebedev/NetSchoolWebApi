/*
 * NetSchool
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetSchool);
  }
}(this, function(expect, NetSchool) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('LoginBody', function() {
      beforeEach(function() {
        instance = new NetSchool.LoginBody();
      });

      it('should create an instance of LoginBody', function() {
        // TODO: update the code to test LoginBody
        expect(instance).to.be.a(NetSchool.LoginBody);
      });

      it('should have the property loginType (base name: "LoginType")', function() {
        // TODO: update the code to test the property loginType
        expect(instance).to.have.property('loginType');
        // expect(instance.loginType).to.be(expectedValueLiteral);
      });

      it('should have the property cid (base name: "cid")', function() {
        // TODO: update the code to test the property cid
        expect(instance).to.have.property('cid');
        // expect(instance.cid).to.be(expectedValueLiteral);
      });

      it('should have the property sid (base name: "sid")', function() {
        // TODO: update the code to test the property sid
        expect(instance).to.have.property('sid');
        // expect(instance.sid).to.be(expectedValueLiteral);
      });

      it('should have the property pid (base name: "pid")', function() {
        // TODO: update the code to test the property pid
        expect(instance).to.have.property('pid');
        // expect(instance.pid).to.be(expectedValueLiteral);
      });

      it('should have the property cn (base name: "cn")', function() {
        // TODO: update the code to test the property cn
        expect(instance).to.have.property('cn');
        // expect(instance.cn).to.be(expectedValueLiteral);
      });

      it('should have the property sft (base name: "sft")', function() {
        // TODO: update the code to test the property sft
        expect(instance).to.have.property('sft');
        // expect(instance.sft).to.be(expectedValueLiteral);
      });

      it('should have the property scid (base name: "scid")', function() {
        // TODO: update the code to test the property scid
        expect(instance).to.have.property('scid');
        // expect(instance.scid).to.be(expectedValueLiteral);
      });

      it('should have the property UN (base name: "UN")', function() {
        // TODO: update the code to test the property UN
        expect(instance).to.have.property('UN');
        // expect(instance.UN).to.be(expectedValueLiteral);
      });

      it('should have the property PW (base name: "PW")', function() {
        // TODO: update the code to test the property PW
        expect(instance).to.have.property('PW');
        // expect(instance.PW).to.be(expectedValueLiteral);
      });

      it('should have the property lt (base name: "lt")', function() {
        // TODO: update the code to test the property lt
        expect(instance).to.have.property('lt');
        // expect(instance.lt).to.be(expectedValueLiteral);
      });

      it('should have the property pw2 (base name: "pw2")', function() {
        // TODO: update the code to test the property pw2
        expect(instance).to.have.property('pw2');
        // expect(instance.pw2).to.be(expectedValueLiteral);
      });

      it('should have the property ver (base name: "ver")', function() {
        // TODO: update the code to test the property ver
        expect(instance).to.have.property('ver');
        // expect(instance.ver).to.be(expectedValueLiteral);
      });

    });
  });

}));
