/*
 * NetSchool
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 4.30.43656
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetSchool);
  }
}(this, function(expect, NetSchool) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('StudentDiaryInit', function() {
      beforeEach(function() {
        instance = new NetSchool.StudentDiaryInit();
      });

      it('should create an instance of StudentDiaryInit', function() {
        // TODO: update the code to test StudentDiaryInit
        expect(instance).to.be.a(NetSchool.StudentDiaryInit);
      });

      it('should have the property students (base name: "students")', function() {
        // TODO: update the code to test the property students
        expect(instance).to.have.property('students');
        // expect(instance.students).to.be(expectedValueLiteral);
      });

      it('should have the property currentStudentId (base name: "currentStudentId")', function() {
        // TODO: update the code to test the property currentStudentId
        expect(instance).to.have.property('currentStudentId');
        // expect(instance.currentStudentId).to.be(expectedValueLiteral);
      });

      it('should have the property weekStart (base name: "weekStart")', function() {
        // TODO: update the code to test the property weekStart
        expect(instance).to.have.property('weekStart');
        // expect(instance.weekStart).to.be(expectedValueLiteral);
      });

      it('should have the property yaClass (base name: "yaClass")', function() {
        // TODO: update the code to test the property yaClass
        expect(instance).to.have.property('yaClass');
        // expect(instance.yaClass).to.be(expectedValueLiteral);
      });

      it('should have the property yaClassAuthUrl (base name: "yaClassAuthUrl")', function() {
        // TODO: update the code to test the property yaClassAuthUrl
        expect(instance).to.have.property('yaClassAuthUrl');
        // expect(instance.yaClassAuthUrl).to.be(expectedValueLiteral);
      });

      it('should have the property newDiskToken (base name: "newDiskToken")', function() {
        // TODO: update the code to test the property newDiskToken
        expect(instance).to.have.property('newDiskToken');
        // expect(instance.newDiskToken).to.be(expectedValueLiteral);
      });

      it('should have the property newDiskWasRequest (base name: "newDiskWasRequest")', function() {
        // TODO: update the code to test the property newDiskWasRequest
        expect(instance).to.have.property('newDiskWasRequest');
        // expect(instance.newDiskWasRequest).to.be(expectedValueLiteral);
      });

      it('should have the property ttsuRl (base name: "ttsuRl")', function() {
        // TODO: update the code to test the property ttsuRl
        expect(instance).to.have.property('ttsuRl');
        // expect(instance.ttsuRl).to.be(expectedValueLiteral);
      });

      it('should have the property externalUrl (base name: "externalUrl")', function() {
        // TODO: update the code to test the property externalUrl
        expect(instance).to.have.property('externalUrl');
        // expect(instance.externalUrl).to.be(expectedValueLiteral);
      });

      it('should have the property weight (base name: "weight")', function() {
        // TODO: update the code to test the property weight
        expect(instance).to.have.property('weight');
        // expect(instance.weight).to.be(expectedValueLiteral);
      });

      it('should have the property maxMark (base name: "maxMark")', function() {
        // TODO: update the code to test the property maxMark
        expect(instance).to.have.property('maxMark');
        // expect(instance.maxMark).to.be(expectedValueLiteral);
      });

      it('should have the property withLaAssigns (base name: "withLaAssigns")', function() {
        // TODO: update the code to test the property withLaAssigns
        expect(instance).to.have.property('withLaAssigns');
        // expect(instance.withLaAssigns).to.be(expectedValueLiteral);
      });

    });
  });

}));
