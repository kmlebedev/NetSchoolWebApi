/*
 * NetSchool
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.Login;
import io.swagger.client.model.LoginData;
import io.swagger.client.model.PrepareEmLoginForm;
import io.swagger.client.model.PrepareLoginForm;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoginApi {
    private ApiClient apiClient;

    public LoginApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoginApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getauthdata
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getauthdataCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/auth/getdata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getauthdataValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getauthdataCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * returns all login data
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getauthdata() throws ApiException {
        ApiResponse<InlineResponse2001> resp = getauthdataWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * returns all login data
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getauthdataWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getauthdataValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * returns all login data
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getauthdataAsync(final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getauthdataValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for login
     * @param loginType  (required)
     * @param cid  (required)
     * @param sid  (required)
     * @param pid  (required)
     * @param cn  (required)
     * @param sft  (required)
     * @param scid  (required)
     * @param UN  (required)
     * @param PW  (required)
     * @param lt  (required)
     * @param pw2  (required)
     * @param ver  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loginCall(Integer loginType, Integer cid, Integer sid, Integer pid, Integer cn, Integer sft, Integer scid, String UN, String PW, Integer lt, String pw2, Integer ver, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (loginType != null)
        localVarFormParams.put("LoginType", loginType);
        if (cid != null)
        localVarFormParams.put("cid", cid);
        if (sid != null)
        localVarFormParams.put("sid", sid);
        if (pid != null)
        localVarFormParams.put("pid", pid);
        if (cn != null)
        localVarFormParams.put("cn", cn);
        if (sft != null)
        localVarFormParams.put("sft", sft);
        if (scid != null)
        localVarFormParams.put("scid", scid);
        if (UN != null)
        localVarFormParams.put("UN", UN);
        if (PW != null)
        localVarFormParams.put("PW", PW);
        if (lt != null)
        localVarFormParams.put("lt", lt);
        if (pw2 != null)
        localVarFormParams.put("pw2", pw2);
        if (ver != null)
        localVarFormParams.put("ver", ver);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loginValidateBeforeCall(Integer loginType, Integer cid, Integer sid, Integer pid, Integer cn, Integer sft, Integer scid, String UN, String PW, Integer lt, String pw2, Integer ver, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loginType' is set
        if (loginType == null) {
            throw new ApiException("Missing the required parameter 'loginType' when calling login(Async)");
        }
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling login(Async)");
        }
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling login(Async)");
        }
        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling login(Async)");
        }
        // verify the required parameter 'cn' is set
        if (cn == null) {
            throw new ApiException("Missing the required parameter 'cn' when calling login(Async)");
        }
        // verify the required parameter 'sft' is set
        if (sft == null) {
            throw new ApiException("Missing the required parameter 'sft' when calling login(Async)");
        }
        // verify the required parameter 'scid' is set
        if (scid == null) {
            throw new ApiException("Missing the required parameter 'scid' when calling login(Async)");
        }
        // verify the required parameter 'UN' is set
        if (UN == null) {
            throw new ApiException("Missing the required parameter 'UN' when calling login(Async)");
        }
        // verify the required parameter 'PW' is set
        if (PW == null) {
            throw new ApiException("Missing the required parameter 'PW' when calling login(Async)");
        }
        // verify the required parameter 'lt' is set
        if (lt == null) {
            throw new ApiException("Missing the required parameter 'lt' when calling login(Async)");
        }
        // verify the required parameter 'pw2' is set
        if (pw2 == null) {
            throw new ApiException("Missing the required parameter 'pw2' when calling login(Async)");
        }
        // verify the required parameter 'ver' is set
        if (ver == null) {
            throw new ApiException("Missing the required parameter 'ver' when calling login(Async)");
        }
        
        com.squareup.okhttp.Call call = loginCall(loginType, cid, sid, pid, cn, sft, scid, UN, PW, lt, pw2, ver, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * returns all login data
     * @param loginType  (required)
     * @param cid  (required)
     * @param sid  (required)
     * @param pid  (required)
     * @param cn  (required)
     * @param sft  (required)
     * @param scid  (required)
     * @param UN  (required)
     * @param PW  (required)
     * @param lt  (required)
     * @param pw2  (required)
     * @param ver  (required)
     * @return Login
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Login login(Integer loginType, Integer cid, Integer sid, Integer pid, Integer cn, Integer sft, Integer scid, String UN, String PW, Integer lt, String pw2, Integer ver) throws ApiException {
        ApiResponse<Login> resp = loginWithHttpInfo(loginType, cid, sid, pid, cn, sft, scid, UN, PW, lt, pw2, ver);
        return resp.getData();
    }

    /**
     * 
     * returns all login data
     * @param loginType  (required)
     * @param cid  (required)
     * @param sid  (required)
     * @param pid  (required)
     * @param cn  (required)
     * @param sft  (required)
     * @param scid  (required)
     * @param UN  (required)
     * @param PW  (required)
     * @param lt  (required)
     * @param pw2  (required)
     * @param ver  (required)
     * @return ApiResponse&lt;Login&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Login> loginWithHttpInfo(Integer loginType, Integer cid, Integer sid, Integer pid, Integer cn, Integer sft, Integer scid, String UN, String PW, Integer lt, String pw2, Integer ver) throws ApiException {
        com.squareup.okhttp.Call call = loginValidateBeforeCall(loginType, cid, sid, pid, cn, sft, scid, UN, PW, lt, pw2, ver, null, null);
        Type localVarReturnType = new TypeToken<Login>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * returns all login data
     * @param loginType  (required)
     * @param cid  (required)
     * @param sid  (required)
     * @param pid  (required)
     * @param cn  (required)
     * @param sft  (required)
     * @param scid  (required)
     * @param UN  (required)
     * @param PW  (required)
     * @param lt  (required)
     * @param pw2  (required)
     * @param ver  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loginAsync(Integer loginType, Integer cid, Integer sid, Integer pid, Integer cn, Integer sft, Integer scid, String UN, String PW, Integer lt, String pw2, Integer ver, final ApiCallback<Login> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loginValidateBeforeCall(loginType, cid, sid, pid, cn, sft, scid, UN, PW, lt, pw2, ver, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Login>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for logindata
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call logindataCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logindata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call logindataValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = logindataCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * returns all login data
     * @return LoginData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoginData logindata() throws ApiException {
        ApiResponse<LoginData> resp = logindataWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * returns all login data
     * @return ApiResponse&lt;LoginData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoginData> logindataWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = logindataValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<LoginData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * returns all login data
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logindataAsync(final ApiCallback<LoginData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logindataValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoginData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for prepareemloginform
     * @param cacheVer  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call prepareemloginformCall(String cacheVer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/prepareemloginform";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cacheVer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cacheVer", cacheVer));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call prepareemloginformValidateBeforeCall(String cacheVer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = prepareemloginformCall(cacheVer, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * returns all prepareemloginform
     * @param cacheVer  (optional)
     * @return PrepareEmLoginForm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrepareEmLoginForm prepareemloginform(String cacheVer) throws ApiException {
        ApiResponse<PrepareEmLoginForm> resp = prepareemloginformWithHttpInfo(cacheVer);
        return resp.getData();
    }

    /**
     * 
     * returns all prepareemloginform
     * @param cacheVer  (optional)
     * @return ApiResponse&lt;PrepareEmLoginForm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrepareEmLoginForm> prepareemloginformWithHttpInfo(String cacheVer) throws ApiException {
        com.squareup.okhttp.Call call = prepareemloginformValidateBeforeCall(cacheVer, null, null);
        Type localVarReturnType = new TypeToken<PrepareEmLoginForm>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * returns all prepareemloginform
     * @param cacheVer  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call prepareemloginformAsync(String cacheVer, final ApiCallback<PrepareEmLoginForm> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = prepareemloginformValidateBeforeCall(cacheVer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrepareEmLoginForm>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for prepareloginform
     * @param cacheVer  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call prepareloginformCall(String cacheVer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/prepareloginform";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cacheVer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cacheVer", cacheVer));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call prepareloginformValidateBeforeCall(String cacheVer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = prepareloginformCall(cacheVer, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * returns all prepareloginform
     * @param cacheVer  (optional)
     * @return PrepareLoginForm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrepareLoginForm prepareloginform(String cacheVer) throws ApiException {
        ApiResponse<PrepareLoginForm> resp = prepareloginformWithHttpInfo(cacheVer);
        return resp.getData();
    }

    /**
     * 
     * returns all prepareloginform
     * @param cacheVer  (optional)
     * @return ApiResponse&lt;PrepareLoginForm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrepareLoginForm> prepareloginformWithHttpInfo(String cacheVer) throws ApiException {
        com.squareup.okhttp.Call call = prepareloginformValidateBeforeCall(cacheVer, null, null);
        Type localVarReturnType = new TypeToken<PrepareLoginForm>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * returns all prepareloginform
     * @param cacheVer  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call prepareloginformAsync(String cacheVer, final ApiCallback<PrepareLoginForm> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = prepareloginformValidateBeforeCall(cacheVer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrepareLoginForm>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
