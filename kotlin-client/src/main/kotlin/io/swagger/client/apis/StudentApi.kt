/**
 * NetSchool
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Diary
import io.swagger.client.models.StudentDiaryInit

import io.swagger.client.infrastructure.*

class StudentApi(basePath: kotlin.String = "https://virtserver.swaggerhub.com/LEBEDEVKM/NetSchool/5.10.63221") : ApiClient(basePath) {

    /**
     * 
     * returns all assignments
     * @param studentId  
     * @param weekStart  (optional)
     * @param weekEnd  (optional)
     * @param withLaAssigns  (optional)
     * @param withPastMandatory  (optional)
     * @param yearId  (optional)
     * @return Diary
     */
    @Suppress("UNCHECKED_CAST")
    fun studentDiary(studentId: kotlin.Int, weekStart: java.time.LocalDate? = null, weekEnd: java.time.LocalDate? = null, withLaAssigns: kotlin.Boolean? = null, withPastMandatory: kotlin.Boolean? = null, yearId: kotlin.Int? = null): Diary {
        val localVariableQuery: MultiValueMap = mapOf("studentId" to listOf("$studentId"), "weekStart" to listOf("$weekStart"), "weekEnd" to listOf("$weekEnd"), "withLaAssigns" to listOf("$withLaAssigns"), "withPastMandatory" to listOf("$withPastMandatory"), "yearId" to listOf("$yearId"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/student/diary", query = localVariableQuery
        )
        val response = request<Diary>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Diary
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * returns strudent diary init data
     * @return StudentDiaryInit
     */
    @Suppress("UNCHECKED_CAST")
    fun studentDiaryInit(): StudentDiaryInit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/student/diary/init"
        )
        val response = request<StudentDiaryInit>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as StudentDiaryInit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
