/**
 * NetSchool
 * The API for the NetSchool irTech project
 *
 * OpenAPI spec version: 5.10.63221
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.InlineResponse2001
import io.swagger.client.models.Login
import io.swagger.client.models.LoginData
import io.swagger.client.models.PrepareEmLoginForm
import io.swagger.client.models.PrepareLoginForm

import io.swagger.client.infrastructure.*

class LoginApi(basePath: kotlin.String = "https://virtserver.swaggerhub.com/LEBEDEVKM/NetSchool/5.10.63221") : ApiClient(basePath) {

    /**
     * 
     * returns all login data
     * @return InlineResponse2001
     */
    @Suppress("UNCHECKED_CAST")
    fun getauthdata(): InlineResponse2001 {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/auth/getdata"
        )
        val response = request<InlineResponse2001>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * returns all login data
     * @param loginType  
     * @param cid  
     * @param sid  
     * @param pid  
     * @param cn  
     * @param sft  
     * @param scid  
     * @param uN  
     * @param pW  
     * @param lt  
     * @param pw2  
     * @param ver  
     * @return Login
     */
    @Suppress("UNCHECKED_CAST")
    fun login(loginType: kotlin.Int, cid: kotlin.Int, sid: kotlin.Int, pid: kotlin.Int, cn: kotlin.Int, sft: kotlin.Int, scid: kotlin.Int, uN: kotlin.String, pW: kotlin.String, lt: kotlin.Int, pw2: kotlin.String, ver: kotlin.Int): Login {
        val localVariableBody: kotlin.Any? = mapOf("LoginType" to "$loginType", "cid" to "$cid", "sid" to "$sid", "pid" to "$pid", "cn" to "$cn", "sft" to "$sft", "scid" to "$scid", "UN" to "$uN", "PW" to "$pW", "lt" to "$lt", "pw2" to "$pw2", "ver" to "$ver")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/login", headers = localVariableHeaders
        )
        val response = request<Login>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Login
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * returns all login data
     * @return LoginData
     */
    @Suppress("UNCHECKED_CAST")
    fun logindata(): LoginData {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/logindata"
        )
        val response = request<LoginData>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as LoginData
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * returns all prepareemloginform
     * @param cacheVer  (optional)
     * @return PrepareEmLoginForm
     */
    @Suppress("UNCHECKED_CAST")
    fun prepareemloginform(cacheVer: kotlin.String? = null): PrepareEmLoginForm {
        val localVariableQuery: MultiValueMap = mapOf("cacheVer" to listOf("$cacheVer"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/prepareemloginform", query = localVariableQuery
        )
        val response = request<PrepareEmLoginForm>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PrepareEmLoginForm
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * returns all prepareloginform
     * @param cacheVer  (optional)
     * @return PrepareLoginForm
     */
    @Suppress("UNCHECKED_CAST")
    fun prepareloginform(cacheVer: kotlin.String? = null): PrepareLoginForm {
        val localVariableQuery: MultiValueMap = mapOf("cacheVer" to listOf("$cacheVer"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/prepareloginform", query = localVariableQuery
        )
        val response = request<PrepareLoginForm>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PrepareLoginForm
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
